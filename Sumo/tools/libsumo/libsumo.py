# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsumo
else:
    import _libsumo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsumo.delete_SwigPyIterator

    def value(self):
        return _libsumo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsumo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsumo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsumo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsumo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsumo.SwigPyIterator_copy(self)

    def next(self):
        return _libsumo.SwigPyIterator_next(self)

    def __next__(self):
        return _libsumo.SwigPyIterator___next__(self)

    def previous(self):
        return _libsumo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsumo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsumo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsumo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsumo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsumo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsumo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsumo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsumo:
_libsumo.SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.StringVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.StringVector___bool__(self)

    def __len__(self):
        return _libsumo.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.StringVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.StringVector_pop(self)

    def append(self, x):
        return _libsumo.StringVector_append(self, x)

    def empty(self):
        return _libsumo.StringVector_empty(self)

    def size(self):
        return _libsumo.StringVector_size(self)

    def swap(self, v):
        return _libsumo.StringVector_swap(self, v)

    def begin(self):
        return _libsumo.StringVector_begin(self)

    def end(self):
        return _libsumo.StringVector_end(self)

    def rbegin(self):
        return _libsumo.StringVector_rbegin(self)

    def rend(self):
        return _libsumo.StringVector_rend(self)

    def clear(self):
        return _libsumo.StringVector_clear(self)

    def get_allocator(self):
        return _libsumo.StringVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.StringVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.StringVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.StringVector_swiginit(self, _libsumo.new_StringVector(*args))

    def push_back(self, x):
        return _libsumo.StringVector_push_back(self, x)

    def front(self):
        return _libsumo.StringVector_front(self)

    def back(self):
        return _libsumo.StringVector_back(self)

    def assign(self, n, x):
        return _libsumo.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.StringVector_reserve(self, n)

    def capacity(self):
        return _libsumo.StringVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_StringVector

# Register StringVector in _libsumo:
_libsumo.StringVector_swigregister(StringVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.IntVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.IntVector___bool__(self)

    def __len__(self):
        return _libsumo.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.IntVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.IntVector_pop(self)

    def append(self, x):
        return _libsumo.IntVector_append(self, x)

    def empty(self):
        return _libsumo.IntVector_empty(self)

    def size(self):
        return _libsumo.IntVector_size(self)

    def swap(self, v):
        return _libsumo.IntVector_swap(self, v)

    def begin(self):
        return _libsumo.IntVector_begin(self)

    def end(self):
        return _libsumo.IntVector_end(self)

    def rbegin(self):
        return _libsumo.IntVector_rbegin(self)

    def rend(self):
        return _libsumo.IntVector_rend(self)

    def clear(self):
        return _libsumo.IntVector_clear(self)

    def get_allocator(self):
        return _libsumo.IntVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.IntVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.IntVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.IntVector_swiginit(self, _libsumo.new_IntVector(*args))

    def push_back(self, x):
        return _libsumo.IntVector_push_back(self, x)

    def front(self):
        return _libsumo.IntVector_front(self)

    def back(self):
        return _libsumo.IntVector_back(self)

    def assign(self, n, x):
        return _libsumo.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.IntVector_reserve(self, n)

    def capacity(self):
        return _libsumo.IntVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_IntVector

# Register IntVector in _libsumo:
_libsumo.IntVector_swigregister(IntVector)

class TraCIException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        _libsumo.TraCIException_swiginit(self, _libsumo.new_TraCIException(what))
    __swig_destroy__ = _libsumo.delete_TraCIException

# Register TraCIException in _libsumo:
_libsumo.TraCIException_swigregister(TraCIException)

class FatalTraCIError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        _libsumo.FatalTraCIError_swiginit(self, _libsumo.new_FatalTraCIError(what))
    __swig_destroy__ = _libsumo.delete_FatalTraCIError

# Register FatalTraCIError in _libsumo:
_libsumo.FatalTraCIError_swigregister(FatalTraCIError)

class TraCIResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsumo.delete_TraCIResult

    def getString(self):
        return _libsumo.TraCIResult_getString(self)

    def getType(self):
        return _libsumo.TraCIResult_getType(self)

    def __init__(self):
        _libsumo.TraCIResult_swiginit(self, _libsumo.new_TraCIResult())

# Register TraCIResult in _libsumo:
_libsumo.TraCIResult_swigregister(TraCIResult)

class TraCIPosition(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIPosition_getString(self)
    x = property(_libsumo.TraCIPosition_x_get, _libsumo.TraCIPosition_x_set)
    y = property(_libsumo.TraCIPosition_y_get, _libsumo.TraCIPosition_y_set)
    z = property(_libsumo.TraCIPosition_z_get, _libsumo.TraCIPosition_z_set)

    def __init__(self):
        _libsumo.TraCIPosition_swiginit(self, _libsumo.new_TraCIPosition())
    __swig_destroy__ = _libsumo.delete_TraCIPosition

# Register TraCIPosition in _libsumo:
_libsumo.TraCIPosition_swigregister(TraCIPosition)

class TraCIRoadPosition(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIRoadPosition_swiginit(self, _libsumo.new_TraCIRoadPosition(*args))

    def getString(self):
        return _libsumo.TraCIRoadPosition_getString(self)
    edgeID = property(_libsumo.TraCIRoadPosition_edgeID_get, _libsumo.TraCIRoadPosition_edgeID_set)
    pos = property(_libsumo.TraCIRoadPosition_pos_get, _libsumo.TraCIRoadPosition_pos_set)
    laneIndex = property(_libsumo.TraCIRoadPosition_laneIndex_get, _libsumo.TraCIRoadPosition_laneIndex_set)
    __swig_destroy__ = _libsumo.delete_TraCIRoadPosition

# Register TraCIRoadPosition in _libsumo:
_libsumo.TraCIRoadPosition_swigregister(TraCIRoadPosition)

class TraCIColor(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIColor_swiginit(self, _libsumo.new_TraCIColor(*args))

    def getString(self):
        return _libsumo.TraCIColor_getString(self)
    r = property(_libsumo.TraCIColor_r_get, _libsumo.TraCIColor_r_set)
    g = property(_libsumo.TraCIColor_g_get, _libsumo.TraCIColor_g_set)
    b = property(_libsumo.TraCIColor_b_get, _libsumo.TraCIColor_b_set)
    a = property(_libsumo.TraCIColor_a_get, _libsumo.TraCIColor_a_set)
    __swig_destroy__ = _libsumo.delete_TraCIColor

# Register TraCIColor in _libsumo:
_libsumo.TraCIColor_swigregister(TraCIColor)

class TraCIPositionVector(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIPositionVector_getString(self)
    value = property(_libsumo.TraCIPositionVector_value_get, _libsumo.TraCIPositionVector_value_set)

    def __init__(self):
        _libsumo.TraCIPositionVector_swiginit(self, _libsumo.new_TraCIPositionVector())
    __swig_destroy__ = _libsumo.delete_TraCIPositionVector

# Register TraCIPositionVector in _libsumo:
_libsumo.TraCIPositionVector_swigregister(TraCIPositionVector)

class TraCIInt(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIInt_swiginit(self, _libsumo.new_TraCIInt(*args))

    def getString(self):
        return _libsumo.TraCIInt_getString(self)
    value = property(_libsumo.TraCIInt_value_get, _libsumo.TraCIInt_value_set)
    __swig_destroy__ = _libsumo.delete_TraCIInt

# Register TraCIInt in _libsumo:
_libsumo.TraCIInt_swigregister(TraCIInt)

class TraCIDouble(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIDouble_swiginit(self, _libsumo.new_TraCIDouble(*args))

    def getString(self):
        return _libsumo.TraCIDouble_getString(self)

    def getType(self):
        return _libsumo.TraCIDouble_getType(self)
    value = property(_libsumo.TraCIDouble_value_get, _libsumo.TraCIDouble_value_set)
    __swig_destroy__ = _libsumo.delete_TraCIDouble

# Register TraCIDouble in _libsumo:
_libsumo.TraCIDouble_swigregister(TraCIDouble)

class TraCIString(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIString_swiginit(self, _libsumo.new_TraCIString(*args))

    def getString(self):
        return _libsumo.TraCIString_getString(self)

    def getType(self):
        return _libsumo.TraCIString_getType(self)
    value = property(_libsumo.TraCIString_value_get, _libsumo.TraCIString_value_set)
    __swig_destroy__ = _libsumo.delete_TraCIString

# Register TraCIString in _libsumo:
_libsumo.TraCIString_swigregister(TraCIString)

class TraCIStringList(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIStringList_getString(self)
    value = property(_libsumo.TraCIStringList_value_get, _libsumo.TraCIStringList_value_set)

    def __init__(self):
        _libsumo.TraCIStringList_swiginit(self, _libsumo.new_TraCIStringList())
    __swig_destroy__ = _libsumo.delete_TraCIStringList

# Register TraCIStringList in _libsumo:
_libsumo.TraCIStringList_swigregister(TraCIStringList)

class TraCIPhase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIPhase_swiginit(self, _libsumo.new_TraCIPhase(*args))
    __swig_destroy__ = _libsumo.delete_TraCIPhase
    duration = property(_libsumo.TraCIPhase_duration_get, _libsumo.TraCIPhase_duration_set)
    state = property(_libsumo.TraCIPhase_state_get, _libsumo.TraCIPhase_state_set)
    minDur = property(_libsumo.TraCIPhase_minDur_get, _libsumo.TraCIPhase_minDur_set)
    maxDur = property(_libsumo.TraCIPhase_maxDur_get, _libsumo.TraCIPhase_maxDur_set)
    next = property(_libsumo.TraCIPhase_next_get, _libsumo.TraCIPhase_next_set)
    name = property(_libsumo.TraCIPhase_name_get, _libsumo.TraCIPhase_name_set)

# Register TraCIPhase in _libsumo:
_libsumo.TraCIPhase_swigregister(TraCIPhase)

class TraCIPhaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIPhaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIPhaseVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIPhaseVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIPhaseVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIPhaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIPhaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIPhaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIPhaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIPhaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIPhaseVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCIPhaseVector_pop(self)

    def append(self, x):
        return _libsumo.TraCIPhaseVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIPhaseVector_empty(self)

    def size(self):
        return _libsumo.TraCIPhaseVector_size(self)

    def swap(self, v):
        return _libsumo.TraCIPhaseVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCIPhaseVector_begin(self)

    def end(self):
        return _libsumo.TraCIPhaseVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIPhaseVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIPhaseVector_rend(self)

    def clear(self):
        return _libsumo.TraCIPhaseVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCIPhaseVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCIPhaseVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIPhaseVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCIPhaseVector_swiginit(self, _libsumo.new_TraCIPhaseVector(*args))

    def push_back(self, x):
        return _libsumo.TraCIPhaseVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIPhaseVector_front(self)

    def back(self):
        return _libsumo.TraCIPhaseVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIPhaseVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIPhaseVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIPhaseVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIPhaseVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIPhaseVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIPhaseVector

# Register TraCIPhaseVector in _libsumo:
_libsumo.TraCIPhaseVector_swigregister(TraCIPhaseVector)

class TraCILogic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCILogic_swiginit(self, _libsumo.new_TraCILogic(*args))
    __swig_destroy__ = _libsumo.delete_TraCILogic
    programID = property(_libsumo.TraCILogic_programID_get, _libsumo.TraCILogic_programID_set)
    type = property(_libsumo.TraCILogic_type_get, _libsumo.TraCILogic_type_set)
    currentPhaseIndex = property(_libsumo.TraCILogic_currentPhaseIndex_get, _libsumo.TraCILogic_currentPhaseIndex_set)
    phases = property(_libsumo.TraCILogic_phases_get, _libsumo.TraCILogic_phases_set)
    subParameter = property(_libsumo.TraCILogic_subParameter_get, _libsumo.TraCILogic_subParameter_set)

# Register TraCILogic in _libsumo:
_libsumo.TraCILogic_swigregister(TraCILogic)

class TraCILink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _from, _via, _to):
        _libsumo.TraCILink_swiginit(self, _libsumo.new_TraCILink(_from, _via, _to))
    __swig_destroy__ = _libsumo.delete_TraCILink
    fromLane = property(_libsumo.TraCILink_fromLane_get, _libsumo.TraCILink_fromLane_set)
    viaLane = property(_libsumo.TraCILink_viaLane_get, _libsumo.TraCILink_viaLane_set)
    toLane = property(_libsumo.TraCILink_toLane_get, _libsumo.TraCILink_toLane_set)

# Register TraCILink in _libsumo:
_libsumo.TraCILink_swigregister(TraCILink)

class TraCIConnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIConnection_swiginit(self, _libsumo.new_TraCIConnection(*args))
    __swig_destroy__ = _libsumo.delete_TraCIConnection
    approachedLane = property(_libsumo.TraCIConnection_approachedLane_get, _libsumo.TraCIConnection_approachedLane_set)
    hasPrio = property(_libsumo.TraCIConnection_hasPrio_get, _libsumo.TraCIConnection_hasPrio_set)
    isOpen = property(_libsumo.TraCIConnection_isOpen_get, _libsumo.TraCIConnection_isOpen_set)
    hasFoe = property(_libsumo.TraCIConnection_hasFoe_get, _libsumo.TraCIConnection_hasFoe_set)
    approachedInternal = property(_libsumo.TraCIConnection_approachedInternal_get, _libsumo.TraCIConnection_approachedInternal_set)
    state = property(_libsumo.TraCIConnection_state_get, _libsumo.TraCIConnection_state_set)
    direction = property(_libsumo.TraCIConnection_direction_get, _libsumo.TraCIConnection_direction_set)
    length = property(_libsumo.TraCIConnection_length_get, _libsumo.TraCIConnection_length_set)

# Register TraCIConnection in _libsumo:
_libsumo.TraCIConnection_swigregister(TraCIConnection)

class TraCIVehicleData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_libsumo.TraCIVehicleData_id_get, _libsumo.TraCIVehicleData_id_set)
    length = property(_libsumo.TraCIVehicleData_length_get, _libsumo.TraCIVehicleData_length_set)
    entryTime = property(_libsumo.TraCIVehicleData_entryTime_get, _libsumo.TraCIVehicleData_entryTime_set)
    leaveTime = property(_libsumo.TraCIVehicleData_leaveTime_get, _libsumo.TraCIVehicleData_leaveTime_set)
    typeID = property(_libsumo.TraCIVehicleData_typeID_get, _libsumo.TraCIVehicleData_typeID_set)

    def __init__(self):
        _libsumo.TraCIVehicleData_swiginit(self, _libsumo.new_TraCIVehicleData())
    __swig_destroy__ = _libsumo.delete_TraCIVehicleData

# Register TraCIVehicleData in _libsumo:
_libsumo.TraCIVehicleData_swigregister(TraCIVehicleData)

class TraCINextTLSData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_libsumo.TraCINextTLSData_id_get, _libsumo.TraCINextTLSData_id_set)
    tlIndex = property(_libsumo.TraCINextTLSData_tlIndex_get, _libsumo.TraCINextTLSData_tlIndex_set)
    dist = property(_libsumo.TraCINextTLSData_dist_get, _libsumo.TraCINextTLSData_dist_set)
    state = property(_libsumo.TraCINextTLSData_state_get, _libsumo.TraCINextTLSData_state_set)

    def __init__(self):
        _libsumo.TraCINextTLSData_swiginit(self, _libsumo.new_TraCINextTLSData())
    __swig_destroy__ = _libsumo.delete_TraCINextTLSData

# Register TraCINextTLSData in _libsumo:
_libsumo.TraCINextTLSData_swigregister(TraCINextTLSData)

class TraCINextStopData(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCINextStopData_swiginit(self, _libsumo.new_TraCINextStopData(*args, **kwargs))

    def getString(self):
        return _libsumo.TraCINextStopData_getString(self)
    lane = property(_libsumo.TraCINextStopData_lane_get, _libsumo.TraCINextStopData_lane_set)
    startPos = property(_libsumo.TraCINextStopData_startPos_get, _libsumo.TraCINextStopData_startPos_set)
    endPos = property(_libsumo.TraCINextStopData_endPos_get, _libsumo.TraCINextStopData_endPos_set)
    stoppingPlaceID = property(_libsumo.TraCINextStopData_stoppingPlaceID_get, _libsumo.TraCINextStopData_stoppingPlaceID_set)
    stopFlags = property(_libsumo.TraCINextStopData_stopFlags_get, _libsumo.TraCINextStopData_stopFlags_set)
    duration = property(_libsumo.TraCINextStopData_duration_get, _libsumo.TraCINextStopData_duration_set)
    until = property(_libsumo.TraCINextStopData_until_get, _libsumo.TraCINextStopData_until_set)
    intendedArrival = property(_libsumo.TraCINextStopData_intendedArrival_get, _libsumo.TraCINextStopData_intendedArrival_set)
    arrival = property(_libsumo.TraCINextStopData_arrival_get, _libsumo.TraCINextStopData_arrival_set)
    depart = property(_libsumo.TraCINextStopData_depart_get, _libsumo.TraCINextStopData_depart_set)
    split = property(_libsumo.TraCINextStopData_split_get, _libsumo.TraCINextStopData_split_set)
    join = property(_libsumo.TraCINextStopData_join_get, _libsumo.TraCINextStopData_join_set)
    actType = property(_libsumo.TraCINextStopData_actType_get, _libsumo.TraCINextStopData_actType_set)
    tripId = property(_libsumo.TraCINextStopData_tripId_get, _libsumo.TraCINextStopData_tripId_set)
    line = property(_libsumo.TraCINextStopData_line_get, _libsumo.TraCINextStopData_line_set)
    speed = property(_libsumo.TraCINextStopData_speed_get, _libsumo.TraCINextStopData_speed_set)
    __swig_destroy__ = _libsumo.delete_TraCINextStopData

# Register TraCINextStopData in _libsumo:
_libsumo.TraCINextStopData_swigregister(TraCINextStopData)

class TraCINextStopDataVector(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCINextStopDataVector_getString(self)
    value = property(_libsumo.TraCINextStopDataVector_value_get, _libsumo.TraCINextStopDataVector_value_set)

    def __init__(self):
        _libsumo.TraCINextStopDataVector_swiginit(self, _libsumo.new_TraCINextStopDataVector())
    __swig_destroy__ = _libsumo.delete_TraCINextStopDataVector

# Register TraCINextStopDataVector in _libsumo:
_libsumo.TraCINextStopDataVector_swigregister(TraCINextStopDataVector)

class TraCIBestLanesData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    laneID = property(_libsumo.TraCIBestLanesData_laneID_get, _libsumo.TraCIBestLanesData_laneID_set)
    length = property(_libsumo.TraCIBestLanesData_length_get, _libsumo.TraCIBestLanesData_length_set)
    occupation = property(_libsumo.TraCIBestLanesData_occupation_get, _libsumo.TraCIBestLanesData_occupation_set)
    bestLaneOffset = property(_libsumo.TraCIBestLanesData_bestLaneOffset_get, _libsumo.TraCIBestLanesData_bestLaneOffset_set)
    allowsContinuation = property(_libsumo.TraCIBestLanesData_allowsContinuation_get, _libsumo.TraCIBestLanesData_allowsContinuation_set)
    continuationLanes = property(_libsumo.TraCIBestLanesData_continuationLanes_get, _libsumo.TraCIBestLanesData_continuationLanes_set)

    def __init__(self):
        _libsumo.TraCIBestLanesData_swiginit(self, _libsumo.new_TraCIBestLanesData())
    __swig_destroy__ = _libsumo.delete_TraCIBestLanesData

# Register TraCIBestLanesData in _libsumo:
_libsumo.TraCIBestLanesData_swigregister(TraCIBestLanesData)

class TraCIStage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCIStage_swiginit(self, _libsumo.new_TraCIStage(*args, **kwargs))
    type = property(_libsumo.TraCIStage_type_get, _libsumo.TraCIStage_type_set)
    vType = property(_libsumo.TraCIStage_vType_get, _libsumo.TraCIStage_vType_set)
    line = property(_libsumo.TraCIStage_line_get, _libsumo.TraCIStage_line_set)
    destStop = property(_libsumo.TraCIStage_destStop_get, _libsumo.TraCIStage_destStop_set)
    edges = property(_libsumo.TraCIStage_edges_get, _libsumo.TraCIStage_edges_set)
    travelTime = property(_libsumo.TraCIStage_travelTime_get, _libsumo.TraCIStage_travelTime_set)
    cost = property(_libsumo.TraCIStage_cost_get, _libsumo.TraCIStage_cost_set)
    length = property(_libsumo.TraCIStage_length_get, _libsumo.TraCIStage_length_set)
    intended = property(_libsumo.TraCIStage_intended_get, _libsumo.TraCIStage_intended_set)
    depart = property(_libsumo.TraCIStage_depart_get, _libsumo.TraCIStage_depart_set)
    departPos = property(_libsumo.TraCIStage_departPos_get, _libsumo.TraCIStage_departPos_set)
    arrivalPos = property(_libsumo.TraCIStage_arrivalPos_get, _libsumo.TraCIStage_arrivalPos_set)
    description = property(_libsumo.TraCIStage_description_get, _libsumo.TraCIStage_description_set)
    __swig_destroy__ = _libsumo.delete_TraCIStage

# Register TraCIStage in _libsumo:
_libsumo.TraCIStage_swigregister(TraCIStage)

class TraCIReservation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIReservation_swiginit(self, _libsumo.new_TraCIReservation(*args))
    id = property(_libsumo.TraCIReservation_id_get, _libsumo.TraCIReservation_id_set)
    persons = property(_libsumo.TraCIReservation_persons_get, _libsumo.TraCIReservation_persons_set)
    group = property(_libsumo.TraCIReservation_group_get, _libsumo.TraCIReservation_group_set)
    fromEdge = property(_libsumo.TraCIReservation_fromEdge_get, _libsumo.TraCIReservation_fromEdge_set)
    toEdge = property(_libsumo.TraCIReservation_toEdge_get, _libsumo.TraCIReservation_toEdge_set)
    departPos = property(_libsumo.TraCIReservation_departPos_get, _libsumo.TraCIReservation_departPos_set)
    arrivalPos = property(_libsumo.TraCIReservation_arrivalPos_get, _libsumo.TraCIReservation_arrivalPos_set)
    depart = property(_libsumo.TraCIReservation_depart_get, _libsumo.TraCIReservation_depart_set)
    reservationTime = property(_libsumo.TraCIReservation_reservationTime_get, _libsumo.TraCIReservation_reservationTime_set)
    state = property(_libsumo.TraCIReservation_state_get, _libsumo.TraCIReservation_state_set)
    __swig_destroy__ = _libsumo.delete_TraCIReservation

# Register TraCIReservation in _libsumo:
_libsumo.TraCIReservation_swigregister(TraCIReservation)

class TraCICollision(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    collider = property(_libsumo.TraCICollision_collider_get, _libsumo.TraCICollision_collider_set)
    victim = property(_libsumo.TraCICollision_victim_get, _libsumo.TraCICollision_victim_set)
    colliderType = property(_libsumo.TraCICollision_colliderType_get, _libsumo.TraCICollision_colliderType_set)
    victimType = property(_libsumo.TraCICollision_victimType_get, _libsumo.TraCICollision_victimType_set)
    colliderSpeed = property(_libsumo.TraCICollision_colliderSpeed_get, _libsumo.TraCICollision_colliderSpeed_set)
    victimSpeed = property(_libsumo.TraCICollision_victimSpeed_get, _libsumo.TraCICollision_victimSpeed_set)
    type = property(_libsumo.TraCICollision_type_get, _libsumo.TraCICollision_type_set)
    lane = property(_libsumo.TraCICollision_lane_get, _libsumo.TraCICollision_lane_set)
    pos = property(_libsumo.TraCICollision_pos_get, _libsumo.TraCICollision_pos_set)

    def __init__(self):
        _libsumo.TraCICollision_swiginit(self, _libsumo.new_TraCICollision())
    __swig_destroy__ = _libsumo.delete_TraCICollision

# Register TraCICollision in _libsumo:
_libsumo.TraCICollision_swigregister(TraCICollision)

class TraCISignalConstraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    signalId = property(_libsumo.TraCISignalConstraint_signalId_get, _libsumo.TraCISignalConstraint_signalId_set)
    tripId = property(_libsumo.TraCISignalConstraint_tripId_get, _libsumo.TraCISignalConstraint_tripId_set)
    foeId = property(_libsumo.TraCISignalConstraint_foeId_get, _libsumo.TraCISignalConstraint_foeId_set)
    foeSignal = property(_libsumo.TraCISignalConstraint_foeSignal_get, _libsumo.TraCISignalConstraint_foeSignal_set)
    limit = property(_libsumo.TraCISignalConstraint_limit_get, _libsumo.TraCISignalConstraint_limit_set)
    type = property(_libsumo.TraCISignalConstraint_type_get, _libsumo.TraCISignalConstraint_type_set)
    mustWait = property(_libsumo.TraCISignalConstraint_mustWait_get, _libsumo.TraCISignalConstraint_mustWait_set)

    def getString(self):
        return _libsumo.TraCISignalConstraint_getString(self)

    def __init__(self):
        _libsumo.TraCISignalConstraint_swiginit(self, _libsumo.new_TraCISignalConstraint())
    __swig_destroy__ = _libsumo.delete_TraCISignalConstraint

# Register TraCISignalConstraint in _libsumo:
_libsumo.TraCISignalConstraint_swigregister(TraCISignalConstraint)

class TraCILogicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCILogicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCILogicVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCILogicVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCILogicVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCILogicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCILogicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCILogicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCILogicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCILogicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCILogicVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCILogicVector_pop(self)

    def append(self, x):
        return _libsumo.TraCILogicVector_append(self, x)

    def empty(self):
        return _libsumo.TraCILogicVector_empty(self)

    def size(self):
        return _libsumo.TraCILogicVector_size(self)

    def swap(self, v):
        return _libsumo.TraCILogicVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCILogicVector_begin(self)

    def end(self):
        return _libsumo.TraCILogicVector_end(self)

    def rbegin(self):
        return _libsumo.TraCILogicVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCILogicVector_rend(self)

    def clear(self):
        return _libsumo.TraCILogicVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCILogicVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCILogicVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCILogicVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCILogicVector_swiginit(self, _libsumo.new_TraCILogicVector(*args))

    def push_back(self, x):
        return _libsumo.TraCILogicVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCILogicVector_front(self)

    def back(self):
        return _libsumo.TraCILogicVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCILogicVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCILogicVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCILogicVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCILogicVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCILogicVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCILogicVector

# Register TraCILogicVector in _libsumo:
_libsumo.TraCILogicVector_swigregister(TraCILogicVector)

class TraCIStageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIStageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIStageVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIStageVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIStageVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIStageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIStageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIStageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIStageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIStageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIStageVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCIStageVector_pop(self)

    def append(self, x):
        return _libsumo.TraCIStageVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIStageVector_empty(self)

    def size(self):
        return _libsumo.TraCIStageVector_size(self)

    def swap(self, v):
        return _libsumo.TraCIStageVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCIStageVector_begin(self)

    def end(self):
        return _libsumo.TraCIStageVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIStageVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIStageVector_rend(self)

    def clear(self):
        return _libsumo.TraCIStageVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCIStageVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCIStageVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIStageVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCIStageVector_swiginit(self, _libsumo.new_TraCIStageVector(*args))

    def push_back(self, x):
        return _libsumo.TraCIStageVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIStageVector_front(self)

    def back(self):
        return _libsumo.TraCIStageVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIStageVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIStageVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIStageVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIStageVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIStageVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIStageVector

# Register TraCIStageVector in _libsumo:
_libsumo.TraCIStageVector_swigregister(TraCIStageVector)

class TraCINextStopDataVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCINextStopDataVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCINextStopDataVector2___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCINextStopDataVector2___bool__(self)

    def __len__(self):
        return _libsumo.TraCINextStopDataVector2___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCINextStopDataVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCINextStopDataVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCINextStopDataVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCINextStopDataVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCINextStopDataVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCINextStopDataVector2___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCINextStopDataVector2_pop(self)

    def append(self, x):
        return _libsumo.TraCINextStopDataVector2_append(self, x)

    def empty(self):
        return _libsumo.TraCINextStopDataVector2_empty(self)

    def size(self):
        return _libsumo.TraCINextStopDataVector2_size(self)

    def swap(self, v):
        return _libsumo.TraCINextStopDataVector2_swap(self, v)

    def begin(self):
        return _libsumo.TraCINextStopDataVector2_begin(self)

    def end(self):
        return _libsumo.TraCINextStopDataVector2_end(self)

    def rbegin(self):
        return _libsumo.TraCINextStopDataVector2_rbegin(self)

    def rend(self):
        return _libsumo.TraCINextStopDataVector2_rend(self)

    def clear(self):
        return _libsumo.TraCINextStopDataVector2_clear(self)

    def get_allocator(self):
        return _libsumo.TraCINextStopDataVector2_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCINextStopDataVector2_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCINextStopDataVector2_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCINextStopDataVector2_swiginit(self, _libsumo.new_TraCINextStopDataVector2(*args))

    def push_back(self, x):
        return _libsumo.TraCINextStopDataVector2_push_back(self, x)

    def front(self):
        return _libsumo.TraCINextStopDataVector2_front(self)

    def back(self):
        return _libsumo.TraCINextStopDataVector2_back(self)

    def assign(self, n, x):
        return _libsumo.TraCINextStopDataVector2_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCINextStopDataVector2_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCINextStopDataVector2_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCINextStopDataVector2_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCINextStopDataVector2_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCINextStopDataVector2

# Register TraCINextStopDataVector2 in _libsumo:
_libsumo.TraCINextStopDataVector2_swigregister(TraCINextStopDataVector2)

class TraCIReservationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIReservationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIReservationVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIReservationVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIReservationVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIReservationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIReservationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIReservationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIReservationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIReservationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIReservationVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCIReservationVector_pop(self)

    def append(self, x):
        return _libsumo.TraCIReservationVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIReservationVector_empty(self)

    def size(self):
        return _libsumo.TraCIReservationVector_size(self)

    def swap(self, v):
        return _libsumo.TraCIReservationVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCIReservationVector_begin(self)

    def end(self):
        return _libsumo.TraCIReservationVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIReservationVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIReservationVector_rend(self)

    def clear(self):
        return _libsumo.TraCIReservationVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCIReservationVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCIReservationVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIReservationVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCIReservationVector_swiginit(self, _libsumo.new_TraCIReservationVector(*args))

    def push_back(self, x):
        return _libsumo.TraCIReservationVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIReservationVector_front(self)

    def back(self):
        return _libsumo.TraCIReservationVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIReservationVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIReservationVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIReservationVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIReservationVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIReservationVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIReservationVector

# Register TraCIReservationVector in _libsumo:
_libsumo.TraCIReservationVector_swigregister(TraCIReservationVector)

class TraCISignalConstraintVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCISignalConstraintVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCISignalConstraintVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCISignalConstraintVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCISignalConstraintVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCISignalConstraintVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCISignalConstraintVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCISignalConstraintVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCISignalConstraintVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCISignalConstraintVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCISignalConstraintVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCISignalConstraintVector_pop(self)

    def append(self, x):
        return _libsumo.TraCISignalConstraintVector_append(self, x)

    def empty(self):
        return _libsumo.TraCISignalConstraintVector_empty(self)

    def size(self):
        return _libsumo.TraCISignalConstraintVector_size(self)

    def swap(self, v):
        return _libsumo.TraCISignalConstraintVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCISignalConstraintVector_begin(self)

    def end(self):
        return _libsumo.TraCISignalConstraintVector_end(self)

    def rbegin(self):
        return _libsumo.TraCISignalConstraintVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCISignalConstraintVector_rend(self)

    def clear(self):
        return _libsumo.TraCISignalConstraintVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCISignalConstraintVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCISignalConstraintVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCISignalConstraintVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCISignalConstraintVector_swiginit(self, _libsumo.new_TraCISignalConstraintVector(*args))

    def push_back(self, x):
        return _libsumo.TraCISignalConstraintVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCISignalConstraintVector_front(self)

    def back(self):
        return _libsumo.TraCISignalConstraintVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCISignalConstraintVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCISignalConstraintVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCISignalConstraintVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCISignalConstraintVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCISignalConstraintVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCISignalConstraintVector

# Register TraCISignalConstraintVector in _libsumo:
_libsumo.TraCISignalConstraintVector_swigregister(TraCISignalConstraintVector)

class edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getAdaptedTraveltime(edgeID, time):
        return _libsumo.edge_getAdaptedTraveltime(edgeID, time)

    @staticmethod
    def getEffort(edgeID, time):
        return _libsumo.edge_getEffort(edgeID, time)

    @staticmethod
    def getTraveltime(edgeID):
        return _libsumo.edge_getTraveltime(edgeID)

    @staticmethod
    def getWaitingTime(edgeID):
        return _libsumo.edge_getWaitingTime(edgeID)

    @staticmethod
    def getLastStepPersonIDs(edgeID):
        return _libsumo.edge_getLastStepPersonIDs(edgeID)

    @staticmethod
    def getLastStepVehicleIDs(edgeID):
        return _libsumo.edge_getLastStepVehicleIDs(edgeID)

    @staticmethod
    def getCO2Emission(edgeID):
        return _libsumo.edge_getCO2Emission(edgeID)

    @staticmethod
    def getCOEmission(edgeID):
        return _libsumo.edge_getCOEmission(edgeID)

    @staticmethod
    def getHCEmission(edgeID):
        return _libsumo.edge_getHCEmission(edgeID)

    @staticmethod
    def getPMxEmission(edgeID):
        return _libsumo.edge_getPMxEmission(edgeID)

    @staticmethod
    def getNOxEmission(edgeID):
        return _libsumo.edge_getNOxEmission(edgeID)

    @staticmethod
    def getFuelConsumption(edgeID):
        return _libsumo.edge_getFuelConsumption(edgeID)

    @staticmethod
    def getNoiseEmission(edgeID):
        return _libsumo.edge_getNoiseEmission(edgeID)

    @staticmethod
    def getElectricityConsumption(edgeID):
        return _libsumo.edge_getElectricityConsumption(edgeID)

    @staticmethod
    def getLastStepVehicleNumber(edgeID):
        return _libsumo.edge_getLastStepVehicleNumber(edgeID)

    @staticmethod
    def getLastStepMeanSpeed(edgeID):
        return _libsumo.edge_getLastStepMeanSpeed(edgeID)

    @staticmethod
    def getLastStepOccupancy(edgeID):
        return _libsumo.edge_getLastStepOccupancy(edgeID)

    @staticmethod
    def getLastStepHaltingNumber(edgeID):
        return _libsumo.edge_getLastStepHaltingNumber(edgeID)

    @staticmethod
    def getLastStepLength(edgeID):
        return _libsumo.edge_getLastStepLength(edgeID)

    @staticmethod
    def getLaneNumber(edgeID):
        return _libsumo.edge_getLaneNumber(edgeID)

    @staticmethod
    def getStreetName(edgeID):
        return _libsumo.edge_getStreetName(edgeID)

    @staticmethod
    def getPendingVehicles(edgeID):
        return _libsumo.edge_getPendingVehicles(edgeID)

    @staticmethod
    def getIDList():
        return _libsumo.edge_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.edge_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.edge_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.edge_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.edge_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.edge_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.edge_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.edge_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.edge_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.edge_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.edge_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.edge_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.edge_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.edge_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def setAllowedVehicleClasses(edgeID, vector):
        return _libsumo.edge_setAllowedVehicleClasses(edgeID, vector)

    @staticmethod
    def setDisallowedVehicleClasses(edgeID, classes):
        return _libsumo.edge_setDisallowedVehicleClasses(edgeID, classes)

    @staticmethod
    def adaptTraveltime(*args, **kwargs):
        return _libsumo.edge_adaptTraveltime(*args, **kwargs)

    @staticmethod
    def setEffort(*args, **kwargs):
        return _libsumo.edge_setEffort(*args, **kwargs)

    @staticmethod
    def setMaxSpeed(edgeID, speed):
        return _libsumo.edge_setMaxSpeed(edgeID, speed)

    @staticmethod
    def storeShape(edgeID, shape):
        return _libsumo.edge_storeShape(edgeID, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.edge_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.edge_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_edge

# Register edge in _libsumo:
_libsumo.edge_swigregister(edge)

def edge_getAdaptedTraveltime(edgeID, time):
    return _libsumo.edge_getAdaptedTraveltime(edgeID, time)

def edge_getEffort(edgeID, time):
    return _libsumo.edge_getEffort(edgeID, time)

def edge_getTraveltime(edgeID):
    return _libsumo.edge_getTraveltime(edgeID)

def edge_getWaitingTime(edgeID):
    return _libsumo.edge_getWaitingTime(edgeID)

def edge_getLastStepPersonIDs(edgeID):
    return _libsumo.edge_getLastStepPersonIDs(edgeID)

def edge_getLastStepVehicleIDs(edgeID):
    return _libsumo.edge_getLastStepVehicleIDs(edgeID)

def edge_getCO2Emission(edgeID):
    return _libsumo.edge_getCO2Emission(edgeID)

def edge_getCOEmission(edgeID):
    return _libsumo.edge_getCOEmission(edgeID)

def edge_getHCEmission(edgeID):
    return _libsumo.edge_getHCEmission(edgeID)

def edge_getPMxEmission(edgeID):
    return _libsumo.edge_getPMxEmission(edgeID)

def edge_getNOxEmission(edgeID):
    return _libsumo.edge_getNOxEmission(edgeID)

def edge_getFuelConsumption(edgeID):
    return _libsumo.edge_getFuelConsumption(edgeID)

def edge_getNoiseEmission(edgeID):
    return _libsumo.edge_getNoiseEmission(edgeID)

def edge_getElectricityConsumption(edgeID):
    return _libsumo.edge_getElectricityConsumption(edgeID)

def edge_getLastStepVehicleNumber(edgeID):
    return _libsumo.edge_getLastStepVehicleNumber(edgeID)

def edge_getLastStepMeanSpeed(edgeID):
    return _libsumo.edge_getLastStepMeanSpeed(edgeID)

def edge_getLastStepOccupancy(edgeID):
    return _libsumo.edge_getLastStepOccupancy(edgeID)

def edge_getLastStepHaltingNumber(edgeID):
    return _libsumo.edge_getLastStepHaltingNumber(edgeID)

def edge_getLastStepLength(edgeID):
    return _libsumo.edge_getLastStepLength(edgeID)

def edge_getLaneNumber(edgeID):
    return _libsumo.edge_getLaneNumber(edgeID)

def edge_getStreetName(edgeID):
    return _libsumo.edge_getStreetName(edgeID)

def edge_getPendingVehicles(edgeID):
    return _libsumo.edge_getPendingVehicles(edgeID)

def edge_getIDList():
    return _libsumo.edge_getIDList()

def edge_getIDCount():
    return _libsumo.edge_getIDCount()

def edge_getParameter(objectID, param):
    return _libsumo.edge_getParameter(objectID, param)

def edge_getParameterWithKey(objectID, key):
    return _libsumo.edge_getParameterWithKey(objectID, key)

def edge_setParameter(objectID, param, value):
    return _libsumo.edge_setParameter(objectID, param, value)

def edge_subscribe(*args, **kwargs):
    return _libsumo.edge_subscribe(*args, **kwargs)

def edge_unsubscribe(objectID):
    return _libsumo.edge_unsubscribe(objectID)

def edge_subscribeContext(*args, **kwargs):
    return _libsumo.edge_subscribeContext(*args, **kwargs)

def edge_unsubscribeContext(objectID, domain, dist):
    return _libsumo.edge_unsubscribeContext(objectID, domain, dist)

def edge_getAllSubscriptionResults():
    return _libsumo.edge_getAllSubscriptionResults()

def edge_getSubscriptionResults(objectID):
    return _libsumo.edge_getSubscriptionResults(objectID)

def edge_getAllContextSubscriptionResults():
    return _libsumo.edge_getAllContextSubscriptionResults()

def edge_getContextSubscriptionResults(objectID):
    return _libsumo.edge_getContextSubscriptionResults(objectID)

def edge_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.edge_subscribeParameterWithKey(*args, **kwargs)

def edge_setAllowedVehicleClasses(edgeID, vector):
    return _libsumo.edge_setAllowedVehicleClasses(edgeID, vector)

def edge_setDisallowedVehicleClasses(edgeID, classes):
    return _libsumo.edge_setDisallowedVehicleClasses(edgeID, classes)

def edge_adaptTraveltime(*args, **kwargs):
    return _libsumo.edge_adaptTraveltime(*args, **kwargs)

def edge_setEffort(*args, **kwargs):
    return _libsumo.edge_setEffort(*args, **kwargs)

def edge_setMaxSpeed(edgeID, speed):
    return _libsumo.edge_setMaxSpeed(edgeID, speed)

def edge_storeShape(edgeID, shape):
    return _libsumo.edge_storeShape(edgeID, shape)

def edge_makeWrapper():
    return _libsumo.edge_makeWrapper()

def edge_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.edge_handleVariable(objID, variable, wrapper, paramData)

class inductionloop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getPosition(detID):
        return _libsumo.inductionloop_getPosition(detID)

    @staticmethod
    def getLaneID(detID):
        return _libsumo.inductionloop_getLaneID(detID)

    @staticmethod
    def getLastStepVehicleNumber(detID):
        return _libsumo.inductionloop_getLastStepVehicleNumber(detID)

    @staticmethod
    def getLastStepMeanSpeed(detID):
        return _libsumo.inductionloop_getLastStepMeanSpeed(detID)

    @staticmethod
    def getLastStepVehicleIDs(detID):
        return _libsumo.inductionloop_getLastStepVehicleIDs(detID)

    @staticmethod
    def getLastStepOccupancy(detID):
        return _libsumo.inductionloop_getLastStepOccupancy(detID)

    @staticmethod
    def getLastStepMeanLength(detID):
        return _libsumo.inductionloop_getLastStepMeanLength(detID)

    @staticmethod
    def getTimeSinceDetection(detID):
        return _libsumo.inductionloop_getTimeSinceDetection(detID)

    @staticmethod
    def getVehicleData(detID):
        return _libsumo.inductionloop_getVehicleData(detID)

    @staticmethod
    def getIDList():
        return _libsumo.inductionloop_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.inductionloop_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.inductionloop_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.inductionloop_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.inductionloop_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.inductionloop_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.inductionloop_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.inductionloop_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.inductionloop_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.inductionloop_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.inductionloop_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.inductionloop_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.inductionloop_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.inductionloop_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def getTree():
        return _libsumo.inductionloop_getTree()

    @staticmethod
    def cleanup():
        return _libsumo.inductionloop_cleanup()

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.inductionloop_storeShape(id, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.inductionloop_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.inductionloop_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_inductionloop

# Register inductionloop in _libsumo:
_libsumo.inductionloop_swigregister(inductionloop)

def inductionloop_getPosition(detID):
    return _libsumo.inductionloop_getPosition(detID)

def inductionloop_getLaneID(detID):
    return _libsumo.inductionloop_getLaneID(detID)

def inductionloop_getLastStepVehicleNumber(detID):
    return _libsumo.inductionloop_getLastStepVehicleNumber(detID)

def inductionloop_getLastStepMeanSpeed(detID):
    return _libsumo.inductionloop_getLastStepMeanSpeed(detID)

def inductionloop_getLastStepVehicleIDs(detID):
    return _libsumo.inductionloop_getLastStepVehicleIDs(detID)

def inductionloop_getLastStepOccupancy(detID):
    return _libsumo.inductionloop_getLastStepOccupancy(detID)

def inductionloop_getLastStepMeanLength(detID):
    return _libsumo.inductionloop_getLastStepMeanLength(detID)

def inductionloop_getTimeSinceDetection(detID):
    return _libsumo.inductionloop_getTimeSinceDetection(detID)

def inductionloop_getVehicleData(detID):
    return _libsumo.inductionloop_getVehicleData(detID)

def inductionloop_getIDList():
    return _libsumo.inductionloop_getIDList()

def inductionloop_getIDCount():
    return _libsumo.inductionloop_getIDCount()

def inductionloop_getParameter(objectID, param):
    return _libsumo.inductionloop_getParameter(objectID, param)

def inductionloop_getParameterWithKey(objectID, key):
    return _libsumo.inductionloop_getParameterWithKey(objectID, key)

def inductionloop_setParameter(objectID, param, value):
    return _libsumo.inductionloop_setParameter(objectID, param, value)

def inductionloop_subscribe(*args, **kwargs):
    return _libsumo.inductionloop_subscribe(*args, **kwargs)

def inductionloop_unsubscribe(objectID):
    return _libsumo.inductionloop_unsubscribe(objectID)

def inductionloop_subscribeContext(*args, **kwargs):
    return _libsumo.inductionloop_subscribeContext(*args, **kwargs)

def inductionloop_unsubscribeContext(objectID, domain, dist):
    return _libsumo.inductionloop_unsubscribeContext(objectID, domain, dist)

def inductionloop_getAllSubscriptionResults():
    return _libsumo.inductionloop_getAllSubscriptionResults()

def inductionloop_getSubscriptionResults(objectID):
    return _libsumo.inductionloop_getSubscriptionResults(objectID)

def inductionloop_getAllContextSubscriptionResults():
    return _libsumo.inductionloop_getAllContextSubscriptionResults()

def inductionloop_getContextSubscriptionResults(objectID):
    return _libsumo.inductionloop_getContextSubscriptionResults(objectID)

def inductionloop_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.inductionloop_subscribeParameterWithKey(*args, **kwargs)

def inductionloop_getTree():
    return _libsumo.inductionloop_getTree()

def inductionloop_cleanup():
    return _libsumo.inductionloop_cleanup()

def inductionloop_storeShape(id, shape):
    return _libsumo.inductionloop_storeShape(id, shape)

def inductionloop_makeWrapper():
    return _libsumo.inductionloop_makeWrapper()

def inductionloop_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.inductionloop_handleVariable(objID, variable, wrapper, paramData)

class junction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getPosition(junctionID, includeZ=False):
        return _libsumo.junction_getPosition(junctionID, includeZ)

    @staticmethod
    def getShape(junctionID):
        return _libsumo.junction_getShape(junctionID)

    @staticmethod
    def getIDList():
        return _libsumo.junction_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.junction_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.junction_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.junction_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.junction_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.junction_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.junction_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.junction_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.junction_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.junction_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.junction_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.junction_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.junction_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.junction_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.junction_storeShape(id, shape)

    @staticmethod
    def getTree():
        return _libsumo.junction_getTree()

    @staticmethod
    def cleanup():
        return _libsumo.junction_cleanup()

    @staticmethod
    def makeWrapper():
        return _libsumo.junction_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.junction_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_junction

# Register junction in _libsumo:
_libsumo.junction_swigregister(junction)

def junction_getPosition(junctionID, includeZ=False):
    return _libsumo.junction_getPosition(junctionID, includeZ)

def junction_getShape(junctionID):
    return _libsumo.junction_getShape(junctionID)

def junction_getIDList():
    return _libsumo.junction_getIDList()

def junction_getIDCount():
    return _libsumo.junction_getIDCount()

def junction_getParameter(objectID, param):
    return _libsumo.junction_getParameter(objectID, param)

def junction_getParameterWithKey(objectID, key):
    return _libsumo.junction_getParameterWithKey(objectID, key)

def junction_setParameter(objectID, param, value):
    return _libsumo.junction_setParameter(objectID, param, value)

def junction_subscribe(*args, **kwargs):
    return _libsumo.junction_subscribe(*args, **kwargs)

def junction_unsubscribe(objectID):
    return _libsumo.junction_unsubscribe(objectID)

def junction_subscribeContext(*args, **kwargs):
    return _libsumo.junction_subscribeContext(*args, **kwargs)

def junction_unsubscribeContext(objectID, domain, dist):
    return _libsumo.junction_unsubscribeContext(objectID, domain, dist)

def junction_getAllSubscriptionResults():
    return _libsumo.junction_getAllSubscriptionResults()

def junction_getSubscriptionResults(objectID):
    return _libsumo.junction_getSubscriptionResults(objectID)

def junction_getAllContextSubscriptionResults():
    return _libsumo.junction_getAllContextSubscriptionResults()

def junction_getContextSubscriptionResults(objectID):
    return _libsumo.junction_getContextSubscriptionResults(objectID)

def junction_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.junction_subscribeParameterWithKey(*args, **kwargs)

def junction_storeShape(id, shape):
    return _libsumo.junction_storeShape(id, shape)

def junction_getTree():
    return _libsumo.junction_getTree()

def junction_cleanup():
    return _libsumo.junction_cleanup()

def junction_makeWrapper():
    return _libsumo.junction_makeWrapper()

def junction_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.junction_handleVariable(objID, variable, wrapper, paramData)

class lanearea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getJamLengthVehicle(detID):
        return _libsumo.lanearea_getJamLengthVehicle(detID)

    @staticmethod
    def getJamLengthMeters(detID):
        return _libsumo.lanearea_getJamLengthMeters(detID)

    @staticmethod
    def getLastStepMeanSpeed(detID):
        return _libsumo.lanearea_getLastStepMeanSpeed(detID)

    @staticmethod
    def getLastStepVehicleIDs(detID):
        return _libsumo.lanearea_getLastStepVehicleIDs(detID)

    @staticmethod
    def getLastStepOccupancy(detID):
        return _libsumo.lanearea_getLastStepOccupancy(detID)

    @staticmethod
    def getPosition(detID):
        return _libsumo.lanearea_getPosition(detID)

    @staticmethod
    def getLaneID(detID):
        return _libsumo.lanearea_getLaneID(detID)

    @staticmethod
    def getLength(detID):
        return _libsumo.lanearea_getLength(detID)

    @staticmethod
    def getLastStepVehicleNumber(detID):
        return _libsumo.lanearea_getLastStepVehicleNumber(detID)

    @staticmethod
    def getLastStepHaltingNumber(detID):
        return _libsumo.lanearea_getLastStepHaltingNumber(detID)

    @staticmethod
    def getIDList():
        return _libsumo.lanearea_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.lanearea_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.lanearea_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.lanearea_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.lanearea_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.lanearea_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.lanearea_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.lanearea_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.lanearea_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.lanearea_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.lanearea_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.lanearea_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.lanearea_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.lanearea_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.lanearea_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.lanearea_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_lanearea

# Register lanearea in _libsumo:
_libsumo.lanearea_swigregister(lanearea)

def lanearea_getJamLengthVehicle(detID):
    return _libsumo.lanearea_getJamLengthVehicle(detID)

def lanearea_getJamLengthMeters(detID):
    return _libsumo.lanearea_getJamLengthMeters(detID)

def lanearea_getLastStepMeanSpeed(detID):
    return _libsumo.lanearea_getLastStepMeanSpeed(detID)

def lanearea_getLastStepVehicleIDs(detID):
    return _libsumo.lanearea_getLastStepVehicleIDs(detID)

def lanearea_getLastStepOccupancy(detID):
    return _libsumo.lanearea_getLastStepOccupancy(detID)

def lanearea_getPosition(detID):
    return _libsumo.lanearea_getPosition(detID)

def lanearea_getLaneID(detID):
    return _libsumo.lanearea_getLaneID(detID)

def lanearea_getLength(detID):
    return _libsumo.lanearea_getLength(detID)

def lanearea_getLastStepVehicleNumber(detID):
    return _libsumo.lanearea_getLastStepVehicleNumber(detID)

def lanearea_getLastStepHaltingNumber(detID):
    return _libsumo.lanearea_getLastStepHaltingNumber(detID)

def lanearea_getIDList():
    return _libsumo.lanearea_getIDList()

def lanearea_getIDCount():
    return _libsumo.lanearea_getIDCount()

def lanearea_getParameter(objectID, param):
    return _libsumo.lanearea_getParameter(objectID, param)

def lanearea_getParameterWithKey(objectID, key):
    return _libsumo.lanearea_getParameterWithKey(objectID, key)

def lanearea_setParameter(objectID, param, value):
    return _libsumo.lanearea_setParameter(objectID, param, value)

def lanearea_subscribe(*args, **kwargs):
    return _libsumo.lanearea_subscribe(*args, **kwargs)

def lanearea_unsubscribe(objectID):
    return _libsumo.lanearea_unsubscribe(objectID)

def lanearea_subscribeContext(*args, **kwargs):
    return _libsumo.lanearea_subscribeContext(*args, **kwargs)

def lanearea_unsubscribeContext(objectID, domain, dist):
    return _libsumo.lanearea_unsubscribeContext(objectID, domain, dist)

def lanearea_getAllSubscriptionResults():
    return _libsumo.lanearea_getAllSubscriptionResults()

def lanearea_getSubscriptionResults(objectID):
    return _libsumo.lanearea_getSubscriptionResults(objectID)

def lanearea_getAllContextSubscriptionResults():
    return _libsumo.lanearea_getAllContextSubscriptionResults()

def lanearea_getContextSubscriptionResults(objectID):
    return _libsumo.lanearea_getContextSubscriptionResults(objectID)

def lanearea_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.lanearea_subscribeParameterWithKey(*args, **kwargs)

def lanearea_makeWrapper():
    return _libsumo.lanearea_makeWrapper()

def lanearea_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.lanearea_handleVariable(objID, variable, wrapper, paramData)

class lane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLinkNumber(laneID):
        return _libsumo.lane_getLinkNumber(laneID)

    @staticmethod
    def getEdgeID(laneID):
        return _libsumo.lane_getEdgeID(laneID)

    @staticmethod
    def getLength(laneID):
        return _libsumo.lane_getLength(laneID)

    @staticmethod
    def getMaxSpeed(laneID):
        return _libsumo.lane_getMaxSpeed(laneID)

    @staticmethod
    def getAllowed(laneID):
        return _libsumo.lane_getAllowed(laneID)

    @staticmethod
    def getDisallowed(laneID):
        return _libsumo.lane_getDisallowed(laneID)

    @staticmethod
    def getLinks(laneID):
        return _libsumo.lane_getLinks(laneID)

    @staticmethod
    def getShape(laneID):
        return _libsumo.lane_getShape(laneID)

    @staticmethod
    def getWidth(laneID):
        return _libsumo.lane_getWidth(laneID)

    @staticmethod
    def getCO2Emission(laneID):
        return _libsumo.lane_getCO2Emission(laneID)

    @staticmethod
    def getCOEmission(laneID):
        return _libsumo.lane_getCOEmission(laneID)

    @staticmethod
    def getHCEmission(laneID):
        return _libsumo.lane_getHCEmission(laneID)

    @staticmethod
    def getPMxEmission(laneID):
        return _libsumo.lane_getPMxEmission(laneID)

    @staticmethod
    def getNOxEmission(laneID):
        return _libsumo.lane_getNOxEmission(laneID)

    @staticmethod
    def getFuelConsumption(laneID):
        return _libsumo.lane_getFuelConsumption(laneID)

    @staticmethod
    def getNoiseEmission(laneID):
        return _libsumo.lane_getNoiseEmission(laneID)

    @staticmethod
    def getElectricityConsumption(laneID):
        return _libsumo.lane_getElectricityConsumption(laneID)

    @staticmethod
    def getLastStepMeanSpeed(laneID):
        return _libsumo.lane_getLastStepMeanSpeed(laneID)

    @staticmethod
    def getLastStepOccupancy(laneID):
        return _libsumo.lane_getLastStepOccupancy(laneID)

    @staticmethod
    def getLastStepLength(laneID):
        return _libsumo.lane_getLastStepLength(laneID)

    @staticmethod
    def getWaitingTime(laneID):
        return _libsumo.lane_getWaitingTime(laneID)

    @staticmethod
    def getTraveltime(laneID):
        return _libsumo.lane_getTraveltime(laneID)

    @staticmethod
    def getLastStepVehicleNumber(laneID):
        return _libsumo.lane_getLastStepVehicleNumber(laneID)

    @staticmethod
    def getLastStepHaltingNumber(laneID):
        return _libsumo.lane_getLastStepHaltingNumber(laneID)

    @staticmethod
    def getLastStepVehicleIDs(laneID):
        return _libsumo.lane_getLastStepVehicleIDs(laneID)

    @staticmethod
    def getFoes(laneID, toLaneID):
        return _libsumo.lane_getFoes(laneID, toLaneID)

    @staticmethod
    def getInternalFoes(laneID):
        return _libsumo.lane_getInternalFoes(laneID)

    @staticmethod
    def getPendingVehicles(laneID):
        return _libsumo.lane_getPendingVehicles(laneID)

    @staticmethod
    def getIDList():
        return _libsumo.lane_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.lane_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.lane_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.lane_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.lane_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.lane_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.lane_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.lane_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.lane_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.lane_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.lane_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.lane_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.lane_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.lane_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def setAllowed(*args):
        return _libsumo.lane_setAllowed(*args)

    @staticmethod
    def setDisallowed(laneID, disallowedClasses):
        return _libsumo.lane_setDisallowed(laneID, disallowedClasses)

    @staticmethod
    def setMaxSpeed(laneID, speed):
        return _libsumo.lane_setMaxSpeed(laneID, speed)

    @staticmethod
    def setLength(laneID, length):
        return _libsumo.lane_setLength(laneID, length)

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.lane_storeShape(id, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.lane_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.lane_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_lane

# Register lane in _libsumo:
_libsumo.lane_swigregister(lane)

def lane_getLinkNumber(laneID):
    return _libsumo.lane_getLinkNumber(laneID)

def lane_getEdgeID(laneID):
    return _libsumo.lane_getEdgeID(laneID)

def lane_getLength(laneID):
    return _libsumo.lane_getLength(laneID)

def lane_getMaxSpeed(laneID):
    return _libsumo.lane_getMaxSpeed(laneID)

def lane_getAllowed(laneID):
    return _libsumo.lane_getAllowed(laneID)

def lane_getDisallowed(laneID):
    return _libsumo.lane_getDisallowed(laneID)

def lane_getLinks(laneID):
    return _libsumo.lane_getLinks(laneID)

def lane_getShape(laneID):
    return _libsumo.lane_getShape(laneID)

def lane_getWidth(laneID):
    return _libsumo.lane_getWidth(laneID)

def lane_getCO2Emission(laneID):
    return _libsumo.lane_getCO2Emission(laneID)

def lane_getCOEmission(laneID):
    return _libsumo.lane_getCOEmission(laneID)

def lane_getHCEmission(laneID):
    return _libsumo.lane_getHCEmission(laneID)

def lane_getPMxEmission(laneID):
    return _libsumo.lane_getPMxEmission(laneID)

def lane_getNOxEmission(laneID):
    return _libsumo.lane_getNOxEmission(laneID)

def lane_getFuelConsumption(laneID):
    return _libsumo.lane_getFuelConsumption(laneID)

def lane_getNoiseEmission(laneID):
    return _libsumo.lane_getNoiseEmission(laneID)

def lane_getElectricityConsumption(laneID):
    return _libsumo.lane_getElectricityConsumption(laneID)

def lane_getLastStepMeanSpeed(laneID):
    return _libsumo.lane_getLastStepMeanSpeed(laneID)

def lane_getLastStepOccupancy(laneID):
    return _libsumo.lane_getLastStepOccupancy(laneID)

def lane_getLastStepLength(laneID):
    return _libsumo.lane_getLastStepLength(laneID)

def lane_getWaitingTime(laneID):
    return _libsumo.lane_getWaitingTime(laneID)

def lane_getTraveltime(laneID):
    return _libsumo.lane_getTraveltime(laneID)

def lane_getLastStepVehicleNumber(laneID):
    return _libsumo.lane_getLastStepVehicleNumber(laneID)

def lane_getLastStepHaltingNumber(laneID):
    return _libsumo.lane_getLastStepHaltingNumber(laneID)

def lane_getLastStepVehicleIDs(laneID):
    return _libsumo.lane_getLastStepVehicleIDs(laneID)

def lane_getFoes(laneID, toLaneID):
    return _libsumo.lane_getFoes(laneID, toLaneID)

def lane_getInternalFoes(laneID):
    return _libsumo.lane_getInternalFoes(laneID)

def lane_getPendingVehicles(laneID):
    return _libsumo.lane_getPendingVehicles(laneID)

def lane_getIDList():
    return _libsumo.lane_getIDList()

def lane_getIDCount():
    return _libsumo.lane_getIDCount()

def lane_getParameter(objectID, param):
    return _libsumo.lane_getParameter(objectID, param)

def lane_getParameterWithKey(objectID, key):
    return _libsumo.lane_getParameterWithKey(objectID, key)

def lane_setParameter(objectID, param, value):
    return _libsumo.lane_setParameter(objectID, param, value)

def lane_subscribe(*args, **kwargs):
    return _libsumo.lane_subscribe(*args, **kwargs)

def lane_unsubscribe(objectID):
    return _libsumo.lane_unsubscribe(objectID)

def lane_subscribeContext(*args, **kwargs):
    return _libsumo.lane_subscribeContext(*args, **kwargs)

def lane_unsubscribeContext(objectID, domain, dist):
    return _libsumo.lane_unsubscribeContext(objectID, domain, dist)

def lane_getAllSubscriptionResults():
    return _libsumo.lane_getAllSubscriptionResults()

def lane_getSubscriptionResults(objectID):
    return _libsumo.lane_getSubscriptionResults(objectID)

def lane_getAllContextSubscriptionResults():
    return _libsumo.lane_getAllContextSubscriptionResults()

def lane_getContextSubscriptionResults(objectID):
    return _libsumo.lane_getContextSubscriptionResults(objectID)

def lane_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.lane_subscribeParameterWithKey(*args, **kwargs)

def lane_setAllowed(*args):
    return _libsumo.lane_setAllowed(*args)

def lane_setDisallowed(laneID, disallowedClasses):
    return _libsumo.lane_setDisallowed(laneID, disallowedClasses)

def lane_setMaxSpeed(laneID, speed):
    return _libsumo.lane_setMaxSpeed(laneID, speed)

def lane_setLength(laneID, length):
    return _libsumo.lane_setLength(laneID, length)

def lane_storeShape(id, shape):
    return _libsumo.lane_storeShape(id, shape)

def lane_makeWrapper():
    return _libsumo.lane_makeWrapper()

def lane_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.lane_handleVariable(objID, variable, wrapper, paramData)

class multientryexit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLastStepVehicleNumber(detID):
        return _libsumo.multientryexit_getLastStepVehicleNumber(detID)

    @staticmethod
    def getLastStepMeanSpeed(detID):
        return _libsumo.multientryexit_getLastStepMeanSpeed(detID)

    @staticmethod
    def getLastStepVehicleIDs(detID):
        return _libsumo.multientryexit_getLastStepVehicleIDs(detID)

    @staticmethod
    def getLastStepHaltingNumber(detID):
        return _libsumo.multientryexit_getLastStepHaltingNumber(detID)

    @staticmethod
    def getIDList():
        return _libsumo.multientryexit_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.multientryexit_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.multientryexit_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.multientryexit_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.multientryexit_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.multientryexit_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.multientryexit_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.multientryexit_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.multientryexit_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.multientryexit_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.multientryexit_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.multientryexit_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.multientryexit_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.multientryexit_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.multientryexit_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.multientryexit_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_multientryexit

# Register multientryexit in _libsumo:
_libsumo.multientryexit_swigregister(multientryexit)

def multientryexit_getLastStepVehicleNumber(detID):
    return _libsumo.multientryexit_getLastStepVehicleNumber(detID)

def multientryexit_getLastStepMeanSpeed(detID):
    return _libsumo.multientryexit_getLastStepMeanSpeed(detID)

def multientryexit_getLastStepVehicleIDs(detID):
    return _libsumo.multientryexit_getLastStepVehicleIDs(detID)

def multientryexit_getLastStepHaltingNumber(detID):
    return _libsumo.multientryexit_getLastStepHaltingNumber(detID)

def multientryexit_getIDList():
    return _libsumo.multientryexit_getIDList()

def multientryexit_getIDCount():
    return _libsumo.multientryexit_getIDCount()

def multientryexit_getParameter(objectID, param):
    return _libsumo.multientryexit_getParameter(objectID, param)

def multientryexit_getParameterWithKey(objectID, key):
    return _libsumo.multientryexit_getParameterWithKey(objectID, key)

def multientryexit_setParameter(objectID, param, value):
    return _libsumo.multientryexit_setParameter(objectID, param, value)

def multientryexit_subscribe(*args, **kwargs):
    return _libsumo.multientryexit_subscribe(*args, **kwargs)

def multientryexit_unsubscribe(objectID):
    return _libsumo.multientryexit_unsubscribe(objectID)

def multientryexit_subscribeContext(*args, **kwargs):
    return _libsumo.multientryexit_subscribeContext(*args, **kwargs)

def multientryexit_unsubscribeContext(objectID, domain, dist):
    return _libsumo.multientryexit_unsubscribeContext(objectID, domain, dist)

def multientryexit_getAllSubscriptionResults():
    return _libsumo.multientryexit_getAllSubscriptionResults()

def multientryexit_getSubscriptionResults(objectID):
    return _libsumo.multientryexit_getSubscriptionResults(objectID)

def multientryexit_getAllContextSubscriptionResults():
    return _libsumo.multientryexit_getAllContextSubscriptionResults()

def multientryexit_getContextSubscriptionResults(objectID):
    return _libsumo.multientryexit_getContextSubscriptionResults(objectID)

def multientryexit_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.multientryexit_subscribeParameterWithKey(*args, **kwargs)

def multientryexit_makeWrapper():
    return _libsumo.multientryexit_makeWrapper()

def multientryexit_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.multientryexit_handleVariable(objID, variable, wrapper, paramData)

class poi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getType(poiID):
        return _libsumo.poi_getType(poiID)

    @staticmethod
    def getPosition(poiID, includeZ=False):
        return _libsumo.poi_getPosition(poiID, includeZ)

    @staticmethod
    def getColor(poiID):
        return _libsumo.poi_getColor(poiID)

    @staticmethod
    def getWidth(poiID):
        return _libsumo.poi_getWidth(poiID)

    @staticmethod
    def getHeight(poiID):
        return _libsumo.poi_getHeight(poiID)

    @staticmethod
    def getAngle(poiID):
        return _libsumo.poi_getAngle(poiID)

    @staticmethod
    def getImageFile(poiID):
        return _libsumo.poi_getImageFile(poiID)

    @staticmethod
    def getIDList():
        return _libsumo.poi_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.poi_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.poi_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.poi_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.poi_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.poi_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.poi_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.poi_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.poi_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.poi_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.poi_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.poi_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.poi_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.poi_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def setType(poiID, setType):
        return _libsumo.poi_setType(poiID, setType)

    @staticmethod
    def setColor(poiID, color):
        return _libsumo.poi_setColor(poiID, color)

    @staticmethod
    def setPosition(poiID, x, y):
        return _libsumo.poi_setPosition(poiID, x, y)

    @staticmethod
    def setWidth(poiID, width):
        return _libsumo.poi_setWidth(poiID, width)

    @staticmethod
    def setHeight(poiID, height):
        return _libsumo.poi_setHeight(poiID, height)

    @staticmethod
    def setAngle(poiID, angle):
        return _libsumo.poi_setAngle(poiID, angle)

    @staticmethod
    def setImageFile(poiID, imageFile):
        return _libsumo.poi_setImageFile(poiID, imageFile)

    @staticmethod
    def add(*args, **kwargs):
        return _libsumo.poi_add(*args, **kwargs)

    @staticmethod
    def remove(poiID, layer=0):
        return _libsumo.poi_remove(poiID, layer)

    @staticmethod
    def highlight(*args, **kwargs):
        return _libsumo.poi_highlight(*args, **kwargs)

    @staticmethod
    def getTree():
        return _libsumo.poi_getTree()

    @staticmethod
    def cleanup():
        return _libsumo.poi_cleanup()

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.poi_storeShape(id, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.poi_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.poi_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_poi

# Register poi in _libsumo:
_libsumo.poi_swigregister(poi)

def poi_getType(poiID):
    return _libsumo.poi_getType(poiID)

def poi_getPosition(poiID, includeZ=False):
    return _libsumo.poi_getPosition(poiID, includeZ)

def poi_getColor(poiID):
    return _libsumo.poi_getColor(poiID)

def poi_getWidth(poiID):
    return _libsumo.poi_getWidth(poiID)

def poi_getHeight(poiID):
    return _libsumo.poi_getHeight(poiID)

def poi_getAngle(poiID):
    return _libsumo.poi_getAngle(poiID)

def poi_getImageFile(poiID):
    return _libsumo.poi_getImageFile(poiID)

def poi_getIDList():
    return _libsumo.poi_getIDList()

def poi_getIDCount():
    return _libsumo.poi_getIDCount()

def poi_getParameter(objectID, param):
    return _libsumo.poi_getParameter(objectID, param)

def poi_getParameterWithKey(objectID, key):
    return _libsumo.poi_getParameterWithKey(objectID, key)

def poi_setParameter(objectID, param, value):
    return _libsumo.poi_setParameter(objectID, param, value)

def poi_subscribe(*args, **kwargs):
    return _libsumo.poi_subscribe(*args, **kwargs)

def poi_unsubscribe(objectID):
    return _libsumo.poi_unsubscribe(objectID)

def poi_subscribeContext(*args, **kwargs):
    return _libsumo.poi_subscribeContext(*args, **kwargs)

def poi_unsubscribeContext(objectID, domain, dist):
    return _libsumo.poi_unsubscribeContext(objectID, domain, dist)

def poi_getAllSubscriptionResults():
    return _libsumo.poi_getAllSubscriptionResults()

def poi_getSubscriptionResults(objectID):
    return _libsumo.poi_getSubscriptionResults(objectID)

def poi_getAllContextSubscriptionResults():
    return _libsumo.poi_getAllContextSubscriptionResults()

def poi_getContextSubscriptionResults(objectID):
    return _libsumo.poi_getContextSubscriptionResults(objectID)

def poi_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.poi_subscribeParameterWithKey(*args, **kwargs)

def poi_setType(poiID, setType):
    return _libsumo.poi_setType(poiID, setType)

def poi_setColor(poiID, color):
    return _libsumo.poi_setColor(poiID, color)

def poi_setPosition(poiID, x, y):
    return _libsumo.poi_setPosition(poiID, x, y)

def poi_setWidth(poiID, width):
    return _libsumo.poi_setWidth(poiID, width)

def poi_setHeight(poiID, height):
    return _libsumo.poi_setHeight(poiID, height)

def poi_setAngle(poiID, angle):
    return _libsumo.poi_setAngle(poiID, angle)

def poi_setImageFile(poiID, imageFile):
    return _libsumo.poi_setImageFile(poiID, imageFile)

def poi_add(*args, **kwargs):
    return _libsumo.poi_add(*args, **kwargs)

def poi_remove(poiID, layer=0):
    return _libsumo.poi_remove(poiID, layer)

def poi_highlight(*args, **kwargs):
    return _libsumo.poi_highlight(*args, **kwargs)

def poi_getTree():
    return _libsumo.poi_getTree()

def poi_cleanup():
    return _libsumo.poi_cleanup()

def poi_storeShape(id, shape):
    return _libsumo.poi_storeShape(id, shape)

def poi_makeWrapper():
    return _libsumo.poi_makeWrapper()

def poi_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.poi_handleVariable(objID, variable, wrapper, paramData)

class polygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getType(polygonID):
        return _libsumo.polygon_getType(polygonID)

    @staticmethod
    def getShape(polygonID):
        return _libsumo.polygon_getShape(polygonID)

    @staticmethod
    def getColor(polygonID):
        return _libsumo.polygon_getColor(polygonID)

    @staticmethod
    def getFilled(polygonID):
        return _libsumo.polygon_getFilled(polygonID)

    @staticmethod
    def getLineWidth(polygonID):
        return _libsumo.polygon_getLineWidth(polygonID)

    @staticmethod
    def getIDList():
        return _libsumo.polygon_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.polygon_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.polygon_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.polygon_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.polygon_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.polygon_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.polygon_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.polygon_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.polygon_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.polygon_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.polygon_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.polygon_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.polygon_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.polygon_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def setType(polygonID, setType):
        return _libsumo.polygon_setType(polygonID, setType)

    @staticmethod
    def setShape(polygonID, shape):
        return _libsumo.polygon_setShape(polygonID, shape)

    @staticmethod
    def setColor(polygonID, color):
        return _libsumo.polygon_setColor(polygonID, color)

    @staticmethod
    def add(*args, **kwargs):
        return _libsumo.polygon_add(*args, **kwargs)

    @staticmethod
    def addDynamics(*args, **kwargs):
        return _libsumo.polygon_addDynamics(*args, **kwargs)

    @staticmethod
    def remove(polygonID, layer=0):
        return _libsumo.polygon_remove(polygonID, layer)

    @staticmethod
    def setFilled(polygonID, filled):
        return _libsumo.polygon_setFilled(polygonID, filled)

    @staticmethod
    def setLineWidth(polygonID, lineWidth):
        return _libsumo.polygon_setLineWidth(polygonID, lineWidth)

    @staticmethod
    def addHighlightPolygon(objectID, type, polygonID, shape, color, fill, polygonType, layer, lineWidth):
        return _libsumo.polygon_addHighlightPolygon(objectID, type, polygonID, shape, color, fill, polygonType, layer, lineWidth)

    @staticmethod
    def getTree():
        return _libsumo.polygon_getTree()

    @staticmethod
    def cleanup():
        return _libsumo.polygon_cleanup()

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.polygon_storeShape(id, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.polygon_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.polygon_handleVariable(objID, variable, wrapper, paramData)

    @staticmethod
    def exists(polyID):
        return _libsumo.polygon_exists(polyID)
    __swig_destroy__ = _libsumo.delete_polygon

# Register polygon in _libsumo:
_libsumo.polygon_swigregister(polygon)

def polygon_getType(polygonID):
    return _libsumo.polygon_getType(polygonID)

def polygon_getShape(polygonID):
    return _libsumo.polygon_getShape(polygonID)

def polygon_getColor(polygonID):
    return _libsumo.polygon_getColor(polygonID)

def polygon_getFilled(polygonID):
    return _libsumo.polygon_getFilled(polygonID)

def polygon_getLineWidth(polygonID):
    return _libsumo.polygon_getLineWidth(polygonID)

def polygon_getIDList():
    return _libsumo.polygon_getIDList()

def polygon_getIDCount():
    return _libsumo.polygon_getIDCount()

def polygon_getParameter(objectID, param):
    return _libsumo.polygon_getParameter(objectID, param)

def polygon_getParameterWithKey(objectID, key):
    return _libsumo.polygon_getParameterWithKey(objectID, key)

def polygon_setParameter(objectID, param, value):
    return _libsumo.polygon_setParameter(objectID, param, value)

def polygon_subscribe(*args, **kwargs):
    return _libsumo.polygon_subscribe(*args, **kwargs)

def polygon_unsubscribe(objectID):
    return _libsumo.polygon_unsubscribe(objectID)

def polygon_subscribeContext(*args, **kwargs):
    return _libsumo.polygon_subscribeContext(*args, **kwargs)

def polygon_unsubscribeContext(objectID, domain, dist):
    return _libsumo.polygon_unsubscribeContext(objectID, domain, dist)

def polygon_getAllSubscriptionResults():
    return _libsumo.polygon_getAllSubscriptionResults()

def polygon_getSubscriptionResults(objectID):
    return _libsumo.polygon_getSubscriptionResults(objectID)

def polygon_getAllContextSubscriptionResults():
    return _libsumo.polygon_getAllContextSubscriptionResults()

def polygon_getContextSubscriptionResults(objectID):
    return _libsumo.polygon_getContextSubscriptionResults(objectID)

def polygon_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.polygon_subscribeParameterWithKey(*args, **kwargs)

def polygon_setType(polygonID, setType):
    return _libsumo.polygon_setType(polygonID, setType)

def polygon_setShape(polygonID, shape):
    return _libsumo.polygon_setShape(polygonID, shape)

def polygon_setColor(polygonID, color):
    return _libsumo.polygon_setColor(polygonID, color)

def polygon_add(*args, **kwargs):
    return _libsumo.polygon_add(*args, **kwargs)

def polygon_addDynamics(*args, **kwargs):
    return _libsumo.polygon_addDynamics(*args, **kwargs)

def polygon_remove(polygonID, layer=0):
    return _libsumo.polygon_remove(polygonID, layer)

def polygon_setFilled(polygonID, filled):
    return _libsumo.polygon_setFilled(polygonID, filled)

def polygon_setLineWidth(polygonID, lineWidth):
    return _libsumo.polygon_setLineWidth(polygonID, lineWidth)

def polygon_addHighlightPolygon(objectID, type, polygonID, shape, color, fill, polygonType, layer, lineWidth):
    return _libsumo.polygon_addHighlightPolygon(objectID, type, polygonID, shape, color, fill, polygonType, layer, lineWidth)

def polygon_getTree():
    return _libsumo.polygon_getTree()

def polygon_cleanup():
    return _libsumo.polygon_cleanup()

def polygon_storeShape(id, shape):
    return _libsumo.polygon_storeShape(id, shape)

def polygon_makeWrapper():
    return _libsumo.polygon_makeWrapper()

def polygon_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.polygon_handleVariable(objID, variable, wrapper, paramData)

def polygon_exists(polyID):
    return _libsumo.polygon_exists(polyID)

class route(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEdges(routeID):
        return _libsumo.route_getEdges(routeID)

    @staticmethod
    def getIDList():
        return _libsumo.route_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.route_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.route_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.route_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.route_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.route_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.route_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.route_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.route_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.route_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.route_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.route_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.route_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.route_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def add(routeID, edges):
        return _libsumo.route_add(routeID, edges)

    @staticmethod
    def makeWrapper():
        return _libsumo.route_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.route_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_route

# Register route in _libsumo:
_libsumo.route_swigregister(route)

def route_getEdges(routeID):
    return _libsumo.route_getEdges(routeID)

def route_getIDList():
    return _libsumo.route_getIDList()

def route_getIDCount():
    return _libsumo.route_getIDCount()

def route_getParameter(objectID, param):
    return _libsumo.route_getParameter(objectID, param)

def route_getParameterWithKey(objectID, key):
    return _libsumo.route_getParameterWithKey(objectID, key)

def route_setParameter(objectID, param, value):
    return _libsumo.route_setParameter(objectID, param, value)

def route_subscribe(*args, **kwargs):
    return _libsumo.route_subscribe(*args, **kwargs)

def route_unsubscribe(objectID):
    return _libsumo.route_unsubscribe(objectID)

def route_subscribeContext(*args, **kwargs):
    return _libsumo.route_subscribeContext(*args, **kwargs)

def route_unsubscribeContext(objectID, domain, dist):
    return _libsumo.route_unsubscribeContext(objectID, domain, dist)

def route_getAllSubscriptionResults():
    return _libsumo.route_getAllSubscriptionResults()

def route_getSubscriptionResults(objectID):
    return _libsumo.route_getSubscriptionResults(objectID)

def route_getAllContextSubscriptionResults():
    return _libsumo.route_getAllContextSubscriptionResults()

def route_getContextSubscriptionResults(objectID):
    return _libsumo.route_getContextSubscriptionResults(objectID)

def route_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.route_subscribeParameterWithKey(*args, **kwargs)

def route_add(routeID, edges):
    return _libsumo.route_add(routeID, edges)

def route_makeWrapper():
    return _libsumo.route_makeWrapper()

def route_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.route_handleVariable(objID, variable, wrapper, paramData)

class simulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def start(*args, **kwargs):
        return _libsumo.simulation_start(*args, **kwargs)

    @staticmethod
    def load(args):
        return _libsumo.simulation_load(args)

    @staticmethod
    def isLoaded():
        return _libsumo.simulation_isLoaded()

    @staticmethod
    def step(time=0.):
        return _libsumo.simulation_step(time)

    @staticmethod
    def close(*args, **kwargs):
        return _libsumo.simulation_close(*args, **kwargs)

    @staticmethod
    def getVersion():
        return _libsumo.simulation_getVersion()

    @staticmethod
    def getCurrentTime():
        return _libsumo.simulation_getCurrentTime()

    @staticmethod
    def getTime():
        return _libsumo.simulation_getTime()

    @staticmethod
    def getLoadedNumber():
        return _libsumo.simulation_getLoadedNumber()

    @staticmethod
    def getLoadedIDList():
        return _libsumo.simulation_getLoadedIDList()

    @staticmethod
    def getDepartedNumber():
        return _libsumo.simulation_getDepartedNumber()

    @staticmethod
    def getDepartedIDList():
        return _libsumo.simulation_getDepartedIDList()

    @staticmethod
    def getArrivedNumber():
        return _libsumo.simulation_getArrivedNumber()

    @staticmethod
    def getArrivedIDList():
        return _libsumo.simulation_getArrivedIDList()

    @staticmethod
    def getParkingStartingVehiclesNumber():
        return _libsumo.simulation_getParkingStartingVehiclesNumber()

    @staticmethod
    def getParkingStartingVehiclesIDList():
        return _libsumo.simulation_getParkingStartingVehiclesIDList()

    @staticmethod
    def getParkingEndingVehiclesNumber():
        return _libsumo.simulation_getParkingEndingVehiclesNumber()

    @staticmethod
    def getParkingEndingVehiclesIDList():
        return _libsumo.simulation_getParkingEndingVehiclesIDList()

    @staticmethod
    def getStopStartingVehiclesNumber():
        return _libsumo.simulation_getStopStartingVehiclesNumber()

    @staticmethod
    def getStopStartingVehiclesIDList():
        return _libsumo.simulation_getStopStartingVehiclesIDList()

    @staticmethod
    def getStopEndingVehiclesNumber():
        return _libsumo.simulation_getStopEndingVehiclesNumber()

    @staticmethod
    def getStopEndingVehiclesIDList():
        return _libsumo.simulation_getStopEndingVehiclesIDList()

    @staticmethod
    def getCollidingVehiclesNumber():
        return _libsumo.simulation_getCollidingVehiclesNumber()

    @staticmethod
    def getCollidingVehiclesIDList():
        return _libsumo.simulation_getCollidingVehiclesIDList()

    @staticmethod
    def getEmergencyStoppingVehiclesNumber():
        return _libsumo.simulation_getEmergencyStoppingVehiclesNumber()

    @staticmethod
    def getEmergencyStoppingVehiclesIDList():
        return _libsumo.simulation_getEmergencyStoppingVehiclesIDList()

    @staticmethod
    def getStartingTeleportNumber():
        return _libsumo.simulation_getStartingTeleportNumber()

    @staticmethod
    def getStartingTeleportIDList():
        return _libsumo.simulation_getStartingTeleportIDList()

    @staticmethod
    def getEndingTeleportNumber():
        return _libsumo.simulation_getEndingTeleportNumber()

    @staticmethod
    def getEndingTeleportIDList():
        return _libsumo.simulation_getEndingTeleportIDList()

    @staticmethod
    def getDepartedPersonNumber():
        return _libsumo.simulation_getDepartedPersonNumber()

    @staticmethod
    def getDepartedPersonIDList():
        return _libsumo.simulation_getDepartedPersonIDList()

    @staticmethod
    def getArrivedPersonNumber():
        return _libsumo.simulation_getArrivedPersonNumber()

    @staticmethod
    def getArrivedPersonIDList():
        return _libsumo.simulation_getArrivedPersonIDList()

    @staticmethod
    def getBusStopIDList():
        return _libsumo.simulation_getBusStopIDList()

    @staticmethod
    def getBusStopWaiting(stopID):
        return _libsumo.simulation_getBusStopWaiting(stopID)

    @staticmethod
    def getBusStopWaitingIDList(stopID):
        return _libsumo.simulation_getBusStopWaitingIDList(stopID)

    @staticmethod
    def getPendingVehicles():
        return _libsumo.simulation_getPendingVehicles()

    @staticmethod
    def getCollisions():
        return _libsumo.simulation_getCollisions()

    @staticmethod
    def getDeltaT():
        return _libsumo.simulation_getDeltaT()

    @staticmethod
    def getNetBoundary():
        return _libsumo.simulation_getNetBoundary()

    @staticmethod
    def getMinExpectedNumber():
        return _libsumo.simulation_getMinExpectedNumber()

    @staticmethod
    def convert2D(edgeID, pos, laneIndex=0, toGeo=False):
        return _libsumo.simulation_convert2D(edgeID, pos, laneIndex, toGeo)

    @staticmethod
    def convert3D(edgeID, pos, laneIndex=0, toGeo=False):
        return _libsumo.simulation_convert3D(edgeID, pos, laneIndex, toGeo)

    @staticmethod
    def convertRoad(*args, **kwargs):
        return _libsumo.simulation_convertRoad(*args, **kwargs)

    @staticmethod
    def convertGeo(x, y, fromGeo=False):
        return _libsumo.simulation_convertGeo(x, y, fromGeo)

    @staticmethod
    def getDistance2D(x1, y1, x2, y2, isGeo=False, isDriving=False):
        return _libsumo.simulation_getDistance2D(x1, y1, x2, y2, isGeo, isDriving)

    @staticmethod
    def getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving=False):
        return _libsumo.simulation_getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving)

    @staticmethod
    def findRoute(*args, **kwargs):
        return _libsumo.simulation_findRoute(*args, **kwargs)

    @staticmethod
    def findIntermodalRoute(*args, **kwargs):
        return _libsumo.simulation_findIntermodalRoute(*args, **kwargs)

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.simulation_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.simulation_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.simulation_setParameter(objectID, param, value)

    @staticmethod
    def clearPending(*args, **kwargs):
        return _libsumo.simulation_clearPending(*args, **kwargs)

    @staticmethod
    def saveState(fileName):
        return _libsumo.simulation_saveState(fileName)

    @staticmethod
    def loadState(fileName):
        return _libsumo.simulation_loadState(fileName)

    @staticmethod
    def writeMessage(msg):
        return _libsumo.simulation_writeMessage(msg)

    @staticmethod
    def subscribe(*args):
        return _libsumo.simulation_subscribe(*args)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.simulation_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.simulation_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.simulation_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.simulation_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(*args):
        return _libsumo.simulation_getSubscriptionResults(*args)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.simulation_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.simulation_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.simulation_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.simulation_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.simulation_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_simulation

# Register simulation in _libsumo:
_libsumo.simulation_swigregister(simulation)

def simulation_start(*args, **kwargs):
    return _libsumo.simulation_start(*args, **kwargs)

def simulation_load(args):
    return _libsumo.simulation_load(args)

def simulation_isLoaded():
    return _libsumo.simulation_isLoaded()

def simulation_step(time=0.):
    return _libsumo.simulation_step(time)

def simulation_close(*args, **kwargs):
    return _libsumo.simulation_close(*args, **kwargs)

def simulation_getVersion():
    return _libsumo.simulation_getVersion()

def simulation_getCurrentTime():
    return _libsumo.simulation_getCurrentTime()

def simulation_getTime():
    return _libsumo.simulation_getTime()

def simulation_getLoadedNumber():
    return _libsumo.simulation_getLoadedNumber()

def simulation_getLoadedIDList():
    return _libsumo.simulation_getLoadedIDList()

def simulation_getDepartedNumber():
    return _libsumo.simulation_getDepartedNumber()

def simulation_getDepartedIDList():
    return _libsumo.simulation_getDepartedIDList()

def simulation_getArrivedNumber():
    return _libsumo.simulation_getArrivedNumber()

def simulation_getArrivedIDList():
    return _libsumo.simulation_getArrivedIDList()

def simulation_getParkingStartingVehiclesNumber():
    return _libsumo.simulation_getParkingStartingVehiclesNumber()

def simulation_getParkingStartingVehiclesIDList():
    return _libsumo.simulation_getParkingStartingVehiclesIDList()

def simulation_getParkingEndingVehiclesNumber():
    return _libsumo.simulation_getParkingEndingVehiclesNumber()

def simulation_getParkingEndingVehiclesIDList():
    return _libsumo.simulation_getParkingEndingVehiclesIDList()

def simulation_getStopStartingVehiclesNumber():
    return _libsumo.simulation_getStopStartingVehiclesNumber()

def simulation_getStopStartingVehiclesIDList():
    return _libsumo.simulation_getStopStartingVehiclesIDList()

def simulation_getStopEndingVehiclesNumber():
    return _libsumo.simulation_getStopEndingVehiclesNumber()

def simulation_getStopEndingVehiclesIDList():
    return _libsumo.simulation_getStopEndingVehiclesIDList()

def simulation_getCollidingVehiclesNumber():
    return _libsumo.simulation_getCollidingVehiclesNumber()

def simulation_getCollidingVehiclesIDList():
    return _libsumo.simulation_getCollidingVehiclesIDList()

def simulation_getEmergencyStoppingVehiclesNumber():
    return _libsumo.simulation_getEmergencyStoppingVehiclesNumber()

def simulation_getEmergencyStoppingVehiclesIDList():
    return _libsumo.simulation_getEmergencyStoppingVehiclesIDList()

def simulation_getStartingTeleportNumber():
    return _libsumo.simulation_getStartingTeleportNumber()

def simulation_getStartingTeleportIDList():
    return _libsumo.simulation_getStartingTeleportIDList()

def simulation_getEndingTeleportNumber():
    return _libsumo.simulation_getEndingTeleportNumber()

def simulation_getEndingTeleportIDList():
    return _libsumo.simulation_getEndingTeleportIDList()

def simulation_getDepartedPersonNumber():
    return _libsumo.simulation_getDepartedPersonNumber()

def simulation_getDepartedPersonIDList():
    return _libsumo.simulation_getDepartedPersonIDList()

def simulation_getArrivedPersonNumber():
    return _libsumo.simulation_getArrivedPersonNumber()

def simulation_getArrivedPersonIDList():
    return _libsumo.simulation_getArrivedPersonIDList()

def simulation_getBusStopIDList():
    return _libsumo.simulation_getBusStopIDList()

def simulation_getBusStopWaiting(stopID):
    return _libsumo.simulation_getBusStopWaiting(stopID)

def simulation_getBusStopWaitingIDList(stopID):
    return _libsumo.simulation_getBusStopWaitingIDList(stopID)

def simulation_getPendingVehicles():
    return _libsumo.simulation_getPendingVehicles()

def simulation_getCollisions():
    return _libsumo.simulation_getCollisions()

def simulation_getDeltaT():
    return _libsumo.simulation_getDeltaT()

def simulation_getNetBoundary():
    return _libsumo.simulation_getNetBoundary()

def simulation_getMinExpectedNumber():
    return _libsumo.simulation_getMinExpectedNumber()

def simulation_convert2D(edgeID, pos, laneIndex=0, toGeo=False):
    return _libsumo.simulation_convert2D(edgeID, pos, laneIndex, toGeo)

def simulation_convert3D(edgeID, pos, laneIndex=0, toGeo=False):
    return _libsumo.simulation_convert3D(edgeID, pos, laneIndex, toGeo)

def simulation_convertRoad(*args, **kwargs):
    return _libsumo.simulation_convertRoad(*args, **kwargs)

def simulation_convertGeo(x, y, fromGeo=False):
    return _libsumo.simulation_convertGeo(x, y, fromGeo)

def simulation_getDistance2D(x1, y1, x2, y2, isGeo=False, isDriving=False):
    return _libsumo.simulation_getDistance2D(x1, y1, x2, y2, isGeo, isDriving)

def simulation_getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving=False):
    return _libsumo.simulation_getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving)

def simulation_findRoute(*args, **kwargs):
    return _libsumo.simulation_findRoute(*args, **kwargs)

def simulation_findIntermodalRoute(*args, **kwargs):
    return _libsumo.simulation_findIntermodalRoute(*args, **kwargs)

def simulation_getParameter(objectID, key):
    return _libsumo.simulation_getParameter(objectID, key)

def simulation_getParameterWithKey(objectID, key):
    return _libsumo.simulation_getParameterWithKey(objectID, key)

def simulation_setParameter(objectID, param, value):
    return _libsumo.simulation_setParameter(objectID, param, value)

def simulation_clearPending(*args, **kwargs):
    return _libsumo.simulation_clearPending(*args, **kwargs)

def simulation_saveState(fileName):
    return _libsumo.simulation_saveState(fileName)

def simulation_loadState(fileName):
    return _libsumo.simulation_loadState(fileName)

def simulation_writeMessage(msg):
    return _libsumo.simulation_writeMessage(msg)

def simulation_subscribe(*args):
    return _libsumo.simulation_subscribe(*args)

def simulation_unsubscribe(objectID):
    return _libsumo.simulation_unsubscribe(objectID)

def simulation_subscribeContext(*args, **kwargs):
    return _libsumo.simulation_subscribeContext(*args, **kwargs)

def simulation_unsubscribeContext(objectID, domain, dist):
    return _libsumo.simulation_unsubscribeContext(objectID, domain, dist)

def simulation_getAllSubscriptionResults():
    return _libsumo.simulation_getAllSubscriptionResults()

def simulation_getSubscriptionResults(*args):
    return _libsumo.simulation_getSubscriptionResults(*args)

def simulation_getAllContextSubscriptionResults():
    return _libsumo.simulation_getAllContextSubscriptionResults()

def simulation_getContextSubscriptionResults(objectID):
    return _libsumo.simulation_getContextSubscriptionResults(objectID)

def simulation_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.simulation_subscribeParameterWithKey(*args, **kwargs)

def simulation_makeWrapper():
    return _libsumo.simulation_makeWrapper()

def simulation_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.simulation_handleVariable(objID, variable, wrapper, paramData)

class trafficlight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getRedYellowGreenState(tlsID):
        return _libsumo.trafficlight_getRedYellowGreenState(tlsID)

    @staticmethod
    def getAllProgramLogics(tlsID):
        return _libsumo.trafficlight_getAllProgramLogics(tlsID)

    @staticmethod
    def getControlledJunctions(tlsID):
        return _libsumo.trafficlight_getControlledJunctions(tlsID)

    @staticmethod
    def getControlledLanes(tlsID):
        return _libsumo.trafficlight_getControlledLanes(tlsID)

    @staticmethod
    def getControlledLinks(tlsID):
        return _libsumo.trafficlight_getControlledLinks(tlsID)

    @staticmethod
    def getProgram(tlsID):
        return _libsumo.trafficlight_getProgram(tlsID)

    @staticmethod
    def getPhase(tlsID):
        return _libsumo.trafficlight_getPhase(tlsID)

    @staticmethod
    def getPhaseName(tlsID):
        return _libsumo.trafficlight_getPhaseName(tlsID)

    @staticmethod
    def getPhaseDuration(tlsID):
        return _libsumo.trafficlight_getPhaseDuration(tlsID)

    @staticmethod
    def getNextSwitch(tlsID):
        return _libsumo.trafficlight_getNextSwitch(tlsID)

    @staticmethod
    def getServedPersonCount(tlsID, index):
        return _libsumo.trafficlight_getServedPersonCount(tlsID, index)

    @staticmethod
    def getBlockingVehicles(tlsID, linkIndex):
        return _libsumo.trafficlight_getBlockingVehicles(tlsID, linkIndex)

    @staticmethod
    def getRivalVehicles(tlsID, linkIndex):
        return _libsumo.trafficlight_getRivalVehicles(tlsID, linkIndex)

    @staticmethod
    def getPriorityVehicles(tlsID, linkIndex):
        return _libsumo.trafficlight_getPriorityVehicles(tlsID, linkIndex)

    @staticmethod
    def getConstraints(*args, **kwargs):
        return _libsumo.trafficlight_getConstraints(*args, **kwargs)

    @staticmethod
    def getConstraintsByFoe(*args, **kwargs):
        return _libsumo.trafficlight_getConstraintsByFoe(*args, **kwargs)

    @staticmethod
    def getIDList():
        return _libsumo.trafficlight_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.trafficlight_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.trafficlight_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.trafficlight_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.trafficlight_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.trafficlight_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.trafficlight_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.trafficlight_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.trafficlight_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.trafficlight_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.trafficlight_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.trafficlight_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.trafficlight_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.trafficlight_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def setRedYellowGreenState(tlsID, state):
        return _libsumo.trafficlight_setRedYellowGreenState(tlsID, state)

    @staticmethod
    def setPhase(tlsID, index):
        return _libsumo.trafficlight_setPhase(tlsID, index)

    @staticmethod
    def setPhaseName(tlsID, name):
        return _libsumo.trafficlight_setPhaseName(tlsID, name)

    @staticmethod
    def setProgram(tlsID, programID):
        return _libsumo.trafficlight_setProgram(tlsID, programID)

    @staticmethod
    def setPhaseDuration(tlsID, phaseDuration):
        return _libsumo.trafficlight_setPhaseDuration(tlsID, phaseDuration)

    @staticmethod
    def setProgramLogic(tlsID, logic):
        return _libsumo.trafficlight_setProgramLogic(tlsID, logic)

    @staticmethod
    def swapConstraints(tlsID, tripId, foeSignal, foeId):
        return _libsumo.trafficlight_swapConstraints(tlsID, tripId, foeSignal, foeId)

    @staticmethod
    def removeConstraints(tlsID, tripId, foeSignal, foeId):
        return _libsumo.trafficlight_removeConstraints(tlsID, tripId, foeSignal, foeId)

    @staticmethod
    def getCompleteRedYellowGreenDefinition(tlsID):
        return _libsumo.trafficlight_getCompleteRedYellowGreenDefinition(tlsID)

    @staticmethod
    def setCompleteRedYellowGreenDefinition(tlsID, logic):
        return _libsumo.trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic)

    @staticmethod
    def makeWrapper():
        return _libsumo.trafficlight_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.trafficlight_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_trafficlight

# Register trafficlight in _libsumo:
_libsumo.trafficlight_swigregister(trafficlight)
cvar = _libsumo.cvar
TRACI_VERSION = cvar.TRACI_VERSION
CMD_GETVERSION = cvar.CMD_GETVERSION
CMD_LOAD = cvar.CMD_LOAD
CMD_SIMSTEP = cvar.CMD_SIMSTEP
CMD_SETORDER = cvar.CMD_SETORDER
CMD_STOP = cvar.CMD_STOP
CMD_REROUTE_TO_PARKING = cvar.CMD_REROUTE_TO_PARKING
CMD_RESUME = cvar.CMD_RESUME
CMD_CHANGELANE = cvar.CMD_CHANGELANE
CMD_SLOWDOWN = cvar.CMD_SLOWDOWN
CMD_CHANGESUBLANE = cvar.CMD_CHANGESUBLANE
CMD_OPENGAP = cvar.CMD_OPENGAP
CMD_REPLACE_STOP = cvar.CMD_REPLACE_STOP
VAR_TAXI_FLEET = cvar.VAR_TAXI_FLEET
CMD_TAXI_DISPATCH = cvar.CMD_TAXI_DISPATCH
CMD_CHANGETARGET = cvar.CMD_CHANGETARGET
CMD_CLOSE = cvar.CMD_CLOSE
CMD_ADD_SUBSCRIPTION_FILTER = cvar.CMD_ADD_SUBSCRIPTION_FILTER
CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
CMD_GET_INDUCTIONLOOP_VARIABLE = cvar.CMD_GET_INDUCTIONLOOP_VARIABLE
RESPONSE_GET_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_GET_INDUCTIONLOOP_VARIABLE
CMD_SET_INDUCTIONLOOP_VARIABLE = cvar.CMD_SET_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
CMD_GET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_GET_MULTIENTRYEXIT_VARIABLE
RESPONSE_GET_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_GET_MULTIENTRYEXIT_VARIABLE
CMD_SET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SET_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_TL_CONTEXT = cvar.CMD_SUBSCRIBE_TL_CONTEXT
RESPONSE_SUBSCRIBE_TL_CONTEXT = cvar.RESPONSE_SUBSCRIBE_TL_CONTEXT
CMD_GET_TL_VARIABLE = cvar.CMD_GET_TL_VARIABLE
RESPONSE_GET_TL_VARIABLE = cvar.RESPONSE_GET_TL_VARIABLE
CMD_SET_TL_VARIABLE = cvar.CMD_SET_TL_VARIABLE
CMD_SUBSCRIBE_TL_VARIABLE = cvar.CMD_SUBSCRIBE_TL_VARIABLE
RESPONSE_SUBSCRIBE_TL_VARIABLE = cvar.RESPONSE_SUBSCRIBE_TL_VARIABLE
CMD_SUBSCRIBE_LANE_CONTEXT = cvar.CMD_SUBSCRIBE_LANE_CONTEXT
RESPONSE_SUBSCRIBE_LANE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANE_CONTEXT
CMD_GET_LANE_VARIABLE = cvar.CMD_GET_LANE_VARIABLE
RESPONSE_GET_LANE_VARIABLE = cvar.RESPONSE_GET_LANE_VARIABLE
CMD_SET_LANE_VARIABLE = cvar.CMD_SET_LANE_VARIABLE
CMD_SUBSCRIBE_LANE_VARIABLE = cvar.CMD_SUBSCRIBE_LANE_VARIABLE
RESPONSE_SUBSCRIBE_LANE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT
CMD_GET_VEHICLE_VARIABLE = cvar.CMD_GET_VEHICLE_VARIABLE
RESPONSE_GET_VEHICLE_VARIABLE = cvar.RESPONSE_GET_VEHICLE_VARIABLE
CMD_SET_VEHICLE_VARIABLE = cvar.CMD_SET_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT
CMD_GET_VEHICLETYPE_VARIABLE = cvar.CMD_GET_VEHICLETYPE_VARIABLE
RESPONSE_GET_VEHICLETYPE_VARIABLE = cvar.RESPONSE_GET_VEHICLETYPE_VARIABLE
CMD_SET_VEHICLETYPE_VARIABLE = cvar.CMD_SET_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_ROUTE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTE_CONTEXT
CMD_GET_ROUTE_VARIABLE = cvar.CMD_GET_ROUTE_VARIABLE
RESPONSE_GET_ROUTE_VARIABLE = cvar.RESPONSE_GET_ROUTE_VARIABLE
CMD_SET_ROUTE_VARIABLE = cvar.CMD_SET_ROUTE_VARIABLE
CMD_SUBSCRIBE_ROUTE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTE_VARIABLE
CMD_SUBSCRIBE_POI_CONTEXT = cvar.CMD_SUBSCRIBE_POI_CONTEXT
RESPONSE_SUBSCRIBE_POI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POI_CONTEXT
CMD_GET_POI_VARIABLE = cvar.CMD_GET_POI_VARIABLE
RESPONSE_GET_POI_VARIABLE = cvar.RESPONSE_GET_POI_VARIABLE
CMD_SET_POI_VARIABLE = cvar.CMD_SET_POI_VARIABLE
CMD_SUBSCRIBE_POI_VARIABLE = cvar.CMD_SUBSCRIBE_POI_VARIABLE
RESPONSE_SUBSCRIBE_POI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POI_VARIABLE
CMD_SUBSCRIBE_POLYGON_CONTEXT = cvar.CMD_SUBSCRIBE_POLYGON_CONTEXT
RESPONSE_SUBSCRIBE_POLYGON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POLYGON_CONTEXT
CMD_GET_POLYGON_VARIABLE = cvar.CMD_GET_POLYGON_VARIABLE
RESPONSE_GET_POLYGON_VARIABLE = cvar.RESPONSE_GET_POLYGON_VARIABLE
CMD_SET_POLYGON_VARIABLE = cvar.CMD_SET_POLYGON_VARIABLE
CMD_SUBSCRIBE_POLYGON_VARIABLE = cvar.CMD_SUBSCRIBE_POLYGON_VARIABLE
RESPONSE_SUBSCRIBE_POLYGON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POLYGON_VARIABLE
CMD_SUBSCRIBE_JUNCTION_CONTEXT = cvar.CMD_SUBSCRIBE_JUNCTION_CONTEXT
RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT
CMD_GET_JUNCTION_VARIABLE = cvar.CMD_GET_JUNCTION_VARIABLE
RESPONSE_GET_JUNCTION_VARIABLE = cvar.RESPONSE_GET_JUNCTION_VARIABLE
CMD_SET_JUNCTION_VARIABLE = cvar.CMD_SET_JUNCTION_VARIABLE
CMD_SUBSCRIBE_JUNCTION_VARIABLE = cvar.CMD_SUBSCRIBE_JUNCTION_VARIABLE
RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE
CMD_SUBSCRIBE_EDGE_CONTEXT = cvar.CMD_SUBSCRIBE_EDGE_CONTEXT
RESPONSE_SUBSCRIBE_EDGE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_EDGE_CONTEXT
CMD_GET_EDGE_VARIABLE = cvar.CMD_GET_EDGE_VARIABLE
RESPONSE_GET_EDGE_VARIABLE = cvar.RESPONSE_GET_EDGE_VARIABLE
CMD_SET_EDGE_VARIABLE = cvar.CMD_SET_EDGE_VARIABLE
CMD_SUBSCRIBE_EDGE_VARIABLE = cvar.CMD_SUBSCRIBE_EDGE_VARIABLE
RESPONSE_SUBSCRIBE_EDGE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_EDGE_VARIABLE
CMD_SUBSCRIBE_SIM_CONTEXT = cvar.CMD_SUBSCRIBE_SIM_CONTEXT
RESPONSE_SUBSCRIBE_SIM_CONTEXT = cvar.RESPONSE_SUBSCRIBE_SIM_CONTEXT
CMD_GET_SIM_VARIABLE = cvar.CMD_GET_SIM_VARIABLE
RESPONSE_GET_SIM_VARIABLE = cvar.RESPONSE_GET_SIM_VARIABLE
CMD_SET_SIM_VARIABLE = cvar.CMD_SET_SIM_VARIABLE
CMD_SUBSCRIBE_SIM_VARIABLE = cvar.CMD_SUBSCRIBE_SIM_VARIABLE
RESPONSE_SUBSCRIBE_SIM_VARIABLE = cvar.RESPONSE_SUBSCRIBE_SIM_VARIABLE
CMD_SUBSCRIBE_GUI_CONTEXT = cvar.CMD_SUBSCRIBE_GUI_CONTEXT
RESPONSE_SUBSCRIBE_GUI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_GUI_CONTEXT
CMD_GET_GUI_VARIABLE = cvar.CMD_GET_GUI_VARIABLE
RESPONSE_GET_GUI_VARIABLE = cvar.RESPONSE_GET_GUI_VARIABLE
CMD_SET_GUI_VARIABLE = cvar.CMD_SET_GUI_VARIABLE
CMD_SUBSCRIBE_GUI_VARIABLE = cvar.CMD_SUBSCRIBE_GUI_VARIABLE
RESPONSE_SUBSCRIBE_GUI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_GUI_VARIABLE
CMD_SUBSCRIBE_LANEAREA_CONTEXT = cvar.CMD_SUBSCRIBE_LANEAREA_CONTEXT
RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT
CMD_GET_LANEAREA_VARIABLE = cvar.CMD_GET_LANEAREA_VARIABLE
RESPONSE_GET_LANEAREA_VARIABLE = cvar.RESPONSE_GET_LANEAREA_VARIABLE
CMD_SET_LANEAREA_VARIABLE = cvar.CMD_SET_LANEAREA_VARIABLE
CMD_SUBSCRIBE_LANEAREA_VARIABLE = cvar.CMD_SUBSCRIBE_LANEAREA_VARIABLE
RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE
CMD_SUBSCRIBE_PERSON_CONTEXT = cvar.CMD_SUBSCRIBE_PERSON_CONTEXT
RESPONSE_SUBSCRIBE_PERSON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PERSON_CONTEXT
CMD_GET_PERSON_VARIABLE = cvar.CMD_GET_PERSON_VARIABLE
RESPONSE_GET_PERSON_VARIABLE = cvar.RESPONSE_GET_PERSON_VARIABLE
CMD_SET_PERSON_VARIABLE = cvar.CMD_SET_PERSON_VARIABLE
CMD_SUBSCRIBE_PERSON_VARIABLE = cvar.CMD_SUBSCRIBE_PERSON_VARIABLE
RESPONSE_SUBSCRIBE_PERSON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PERSON_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.CMD_SUBSCRIBE_BUSSTOP_CONTEXT
RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT
CMD_GET_BUSSTOP_VARIABLE = cvar.CMD_GET_BUSSTOP_VARIABLE
RESPONSE_GET_BUSSTOP_VARIABLE = cvar.RESPONSE_GET_BUSSTOP_VARIABLE
CMD_SET_BUSSTOP_VARIABLE = cvar.CMD_SET_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.CMD_SUBSCRIBE_BUSSTOP_VARIABLE
RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.CMD_SUBSCRIBE_PARKINGAREA_CONTEXT
RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT
CMD_GET_PARKINGAREA_VARIABLE = cvar.CMD_GET_PARKINGAREA_VARIABLE
RESPONSE_GET_PARKINGAREA_VARIABLE = cvar.RESPONSE_GET_PARKINGAREA_VARIABLE
CMD_SET_PARKINGAREA_VARIABLE = cvar.CMD_SET_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.CMD_SUBSCRIBE_PARKINGAREA_VARIABLE
RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT
RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT
CMD_GET_CHARGINGSTATION_VARIABLE = cvar.CMD_GET_CHARGINGSTATION_VARIABLE
RESPONSE_GET_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_GET_CHARGINGSTATION_VARIABLE
CMD_SET_CHARGINGSTATION_VARIABLE = cvar.CMD_SET_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE
RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT
CMD_GET_ROUTEPROBE_VARIABLE = cvar.CMD_GET_ROUTEPROBE_VARIABLE
RESPONSE_GET_ROUTEPROBE_VARIABLE = cvar.RESPONSE_GET_ROUTEPROBE_VARIABLE
CMD_SET_ROUTEPROBE_VARIABLE = cvar.CMD_SET_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.CMD_SUBSCRIBE_CALIBRATOR_CONTEXT
RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT
CMD_GET_CALIBRATOR_VARIABLE = cvar.CMD_GET_CALIBRATOR_VARIABLE
RESPONSE_GET_CALIBRATOR_VARIABLE = cvar.RESPONSE_GET_CALIBRATOR_VARIABLE
CMD_SET_CALIBRATOR_VARIABLE = cvar.CMD_SET_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.CMD_SUBSCRIBE_CALIBRATOR_VARIABLE
RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_REROUTER_CONTEXT = cvar.CMD_SUBSCRIBE_REROUTER_CONTEXT
RESPONSE_SUBSCRIBE_REROUTER_CONTEXT = cvar.RESPONSE_SUBSCRIBE_REROUTER_CONTEXT
CMD_GET_REROUTER_VARIABLE = cvar.CMD_GET_REROUTER_VARIABLE
RESPONSE_GET_REROUTER_VARIABLE = cvar.RESPONSE_GET_REROUTER_VARIABLE
CMD_SET_REROUTER_VARIABLE = cvar.CMD_SET_REROUTER_VARIABLE
CMD_SUBSCRIBE_REROUTER_VARIABLE = cvar.CMD_SUBSCRIBE_REROUTER_VARIABLE
RESPONSE_SUBSCRIBE_REROUTER_VARIABLE = cvar.RESPONSE_SUBSCRIBE_REROUTER_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
CMD_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_GET_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE
CMD_SET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SET_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_MEANDATA_CONTEXT = cvar.CMD_SUBSCRIBE_MEANDATA_CONTEXT
RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT
CMD_GET_MEANDATA_VARIABLE = cvar.CMD_GET_MEANDATA_VARIABLE
RESPONSE_GET_MEANDATA_VARIABLE = cvar.RESPONSE_GET_MEANDATA_VARIABLE
CMD_SET_MEANDATA_VARIABLE = cvar.CMD_SET_MEANDATA_VARIABLE
CMD_SUBSCRIBE_MEANDATA_VARIABLE = cvar.CMD_SUBSCRIBE_MEANDATA_VARIABLE
RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT
RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT
CMD_GET_OVERHEADWIRE_VARIABLE = cvar.CMD_GET_OVERHEADWIRE_VARIABLE
RESPONSE_GET_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_GET_OVERHEADWIRE_VARIABLE
CMD_SET_OVERHEADWIRE_VARIABLE = cvar.CMD_SET_OVERHEADWIRE_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE
RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE
POSITION_LON_LAT = cvar.POSITION_LON_LAT
POSITION_2D = cvar.POSITION_2D
POSITION_LON_LAT_ALT = cvar.POSITION_LON_LAT_ALT
POSITION_3D = cvar.POSITION_3D
POSITION_ROADMAP = cvar.POSITION_ROADMAP
TYPE_POLYGON = cvar.TYPE_POLYGON
TYPE_UBYTE = cvar.TYPE_UBYTE
TYPE_BYTE = cvar.TYPE_BYTE
TYPE_INTEGER = cvar.TYPE_INTEGER
TYPE_DOUBLE = cvar.TYPE_DOUBLE
TYPE_STRING = cvar.TYPE_STRING
TYPE_STRINGLIST = cvar.TYPE_STRINGLIST
TYPE_COMPOUND = cvar.TYPE_COMPOUND
TYPE_DOUBLELIST = cvar.TYPE_DOUBLELIST
TYPE_COLOR = cvar.TYPE_COLOR
RTYPE_OK = cvar.RTYPE_OK
RTYPE_NOTIMPLEMENTED = cvar.RTYPE_NOTIMPLEMENTED
RTYPE_ERR = cvar.RTYPE_ERR
INVALID_DOUBLE_VALUE = cvar.INVALID_DOUBLE_VALUE
INVALID_INT_VALUE = cvar.INVALID_INT_VALUE
MAX_ORDER = cvar.MAX_ORDER
DEFAULT_NUM_RETRIES = cvar.DEFAULT_NUM_RETRIES
REQUEST_AIRDIST = cvar.REQUEST_AIRDIST
REQUEST_DRIVINGDIST = cvar.REQUEST_DRIVINGDIST
REMOVE_TELEPORT = cvar.REMOVE_TELEPORT
REMOVE_PARKING = cvar.REMOVE_PARKING
REMOVE_ARRIVED = cvar.REMOVE_ARRIVED
REMOVE_VAPORIZED = cvar.REMOVE_VAPORIZED
REMOVE_TELEPORT_ARRIVED = cvar.REMOVE_TELEPORT_ARRIVED
MOVE_AUTOMATIC = cvar.MOVE_AUTOMATIC
MOVE_TELEPORT = cvar.MOVE_TELEPORT
MOVE_NORMAL = cvar.MOVE_NORMAL
STAGE_WAITING_FOR_DEPART = cvar.STAGE_WAITING_FOR_DEPART
STAGE_WAITING = cvar.STAGE_WAITING
STAGE_WALKING = cvar.STAGE_WALKING
STAGE_DRIVING = cvar.STAGE_DRIVING
STAGE_ACCESS = cvar.STAGE_ACCESS
STAGE_TRIP = cvar.STAGE_TRIP
STAGE_TRANSHIP = cvar.STAGE_TRANSHIP
STOP_DEFAULT = cvar.STOP_DEFAULT
STOP_PARKING = cvar.STOP_PARKING
STOP_TRIGGERED = cvar.STOP_TRIGGERED
STOP_CONTAINER_TRIGGERED = cvar.STOP_CONTAINER_TRIGGERED
STOP_BUS_STOP = cvar.STOP_BUS_STOP
STOP_CONTAINER_STOP = cvar.STOP_CONTAINER_STOP
STOP_CHARGING_STATION = cvar.STOP_CHARGING_STATION
STOP_PARKING_AREA = cvar.STOP_PARKING_AREA
STOP_OVERHEAD_WIRE = cvar.STOP_OVERHEAD_WIRE
DEPARTFLAG_TRIGGERED = cvar.DEPARTFLAG_TRIGGERED
DEPARTFLAG_CONTAINER_TRIGGERED = cvar.DEPARTFLAG_CONTAINER_TRIGGERED
DEPARTFLAG_NOW = cvar.DEPARTFLAG_NOW
DEPARTFLAG_SPEED_RANDOM = cvar.DEPARTFLAG_SPEED_RANDOM
DEPARTFLAG_SPEED_MAX = cvar.DEPARTFLAG_SPEED_MAX
DEPARTFLAG_LANE_RANDOM = cvar.DEPARTFLAG_LANE_RANDOM
DEPARTFLAG_LANE_FREE = cvar.DEPARTFLAG_LANE_FREE
DEPARTFLAG_LANE_ALLOWED_FREE = cvar.DEPARTFLAG_LANE_ALLOWED_FREE
DEPARTFLAG_LANE_BEST_FREE = cvar.DEPARTFLAG_LANE_BEST_FREE
DEPARTFLAG_LANE_FIRST_ALLOWED = cvar.DEPARTFLAG_LANE_FIRST_ALLOWED
DEPARTFLAG_POS_RANDOM = cvar.DEPARTFLAG_POS_RANDOM
DEPARTFLAG_POS_FREE = cvar.DEPARTFLAG_POS_FREE
DEPARTFLAG_POS_BASE = cvar.DEPARTFLAG_POS_BASE
DEPARTFLAG_POS_LAST = cvar.DEPARTFLAG_POS_LAST
DEPARTFLAG_POS_RANDOM_FREE = cvar.DEPARTFLAG_POS_RANDOM_FREE
ARRIVALFLAG_LANE_CURRENT = cvar.ARRIVALFLAG_LANE_CURRENT
ARRIVALFLAG_SPEED_CURRENT = cvar.ARRIVALFLAG_SPEED_CURRENT
ARRIVALFLAG_POS_RANDOM = cvar.ARRIVALFLAG_POS_RANDOM
ARRIVALFLAG_POS_MAX = cvar.ARRIVALFLAG_POS_MAX
ROUTING_MODE_DEFAULT = cvar.ROUTING_MODE_DEFAULT
ROUTING_MODE_AGGREGATED = cvar.ROUTING_MODE_AGGREGATED
ROUTING_MODE_EFFORT = cvar.ROUTING_MODE_EFFORT
ROUTING_MODE_COMBINED = cvar.ROUTING_MODE_COMBINED
TRAFFICLIGHT_TYPE_STATIC = cvar.TRAFFICLIGHT_TYPE_STATIC
TRAFFICLIGHT_TYPE_ACTUATED = cvar.TRAFFICLIGHT_TYPE_ACTUATED
TRAFFICLIGHT_TYPE_DELAYBASED = cvar.TRAFFICLIGHT_TYPE_DELAYBASED
FILTER_TYPE_NONE = cvar.FILTER_TYPE_NONE
FILTER_TYPE_LANES = cvar.FILTER_TYPE_LANES
FILTER_TYPE_NOOPPOSITE = cvar.FILTER_TYPE_NOOPPOSITE
FILTER_TYPE_DOWNSTREAM_DIST = cvar.FILTER_TYPE_DOWNSTREAM_DIST
FILTER_TYPE_UPSTREAM_DIST = cvar.FILTER_TYPE_UPSTREAM_DIST
FILTER_TYPE_LEAD_FOLLOW = cvar.FILTER_TYPE_LEAD_FOLLOW
FILTER_TYPE_TURN = cvar.FILTER_TYPE_TURN
FILTER_TYPE_VCLASS = cvar.FILTER_TYPE_VCLASS
FILTER_TYPE_VTYPE = cvar.FILTER_TYPE_VTYPE
FILTER_TYPE_FIELD_OF_VISION = cvar.FILTER_TYPE_FIELD_OF_VISION
FILTER_TYPE_LATERAL_DIST = cvar.FILTER_TYPE_LATERAL_DIST
TRACI_ID_LIST = cvar.TRACI_ID_LIST
ID_COUNT = cvar.ID_COUNT
AUTOMATIC_VARIABLES_SUBSCRIPTION = cvar.AUTOMATIC_VARIABLES_SUBSCRIPTION
AUTOMATIC_CONTEXT_SUBSCRIPTION = cvar.AUTOMATIC_CONTEXT_SUBSCRIPTION
GENERIC_ATTRIBUTE = cvar.GENERIC_ATTRIBUTE
LAST_STEP_VEHICLE_NUMBER = cvar.LAST_STEP_VEHICLE_NUMBER
LAST_STEP_MEAN_SPEED = cvar.LAST_STEP_MEAN_SPEED
LAST_STEP_VEHICLE_ID_LIST = cvar.LAST_STEP_VEHICLE_ID_LIST
LAST_STEP_OCCUPANCY = cvar.LAST_STEP_OCCUPANCY
LAST_STEP_VEHICLE_HALTING_NUMBER = cvar.LAST_STEP_VEHICLE_HALTING_NUMBER
LAST_STEP_LENGTH = cvar.LAST_STEP_LENGTH
LAST_STEP_TIME_SINCE_DETECTION = cvar.LAST_STEP_TIME_SINCE_DETECTION
LAST_STEP_VEHICLE_DATA = cvar.LAST_STEP_VEHICLE_DATA
JAM_LENGTH_VEHICLE = cvar.JAM_LENGTH_VEHICLE
JAM_LENGTH_METERS = cvar.JAM_LENGTH_METERS
LAST_STEP_PERSON_ID_LIST = cvar.LAST_STEP_PERSON_ID_LIST
VAR_NAME = cvar.VAR_NAME
VAR_FOLLOW_SPEED = cvar.VAR_FOLLOW_SPEED
VAR_STOP_SPEED = cvar.VAR_STOP_SPEED
VAR_SECURE_GAP = cvar.VAR_SECURE_GAP
VAR_STOP_DELAY = cvar.VAR_STOP_DELAY
VAR_STOP_ARRIVALDELAY = cvar.VAR_STOP_ARRIVALDELAY
VAR_TIMELOSS = cvar.VAR_TIMELOSS
VAR_BEGIN = cvar.VAR_BEGIN
VAR_END = cvar.VAR_END
VAR_VTYPES = cvar.VAR_VTYPES
VAR_VEHSPERHOUR = cvar.VAR_VEHSPERHOUR
VAR_PASSED = cvar.VAR_PASSED
VAR_INSERTED = cvar.VAR_INSERTED
VAR_REMOVED = cvar.VAR_REMOVED
VAR_ROUTE_PROBE = cvar.VAR_ROUTE_PROBE
CMD_SET_FLOW = cvar.CMD_SET_FLOW
TL_RED_YELLOW_GREEN_STATE = cvar.TL_RED_YELLOW_GREEN_STATE
TL_PHASE_INDEX = cvar.TL_PHASE_INDEX
TL_PROGRAM = cvar.TL_PROGRAM
TL_PHASE_DURATION = cvar.TL_PHASE_DURATION
TL_BLOCKING_VEHICLES = cvar.TL_BLOCKING_VEHICLES
TL_CONTROLLED_LANES = cvar.TL_CONTROLLED_LANES
TL_CONTROLLED_LINKS = cvar.TL_CONTROLLED_LINKS
TL_CURRENT_PHASE = cvar.TL_CURRENT_PHASE
TL_CURRENT_PROGRAM = cvar.TL_CURRENT_PROGRAM
TL_RIVAL_VEHICLES = cvar.TL_RIVAL_VEHICLES
TL_PRIORITY_VEHICLES = cvar.TL_PRIORITY_VEHICLES
TL_CONTROLLED_JUNCTIONS = cvar.TL_CONTROLLED_JUNCTIONS
TL_COMPLETE_DEFINITION_RYG = cvar.TL_COMPLETE_DEFINITION_RYG
TL_COMPLETE_PROGRAM_RYG = cvar.TL_COMPLETE_PROGRAM_RYG
TL_NEXT_SWITCH = cvar.TL_NEXT_SWITCH
TL_EXTERNAL_STATE = cvar.TL_EXTERNAL_STATE
TL_CONSTRAINT = cvar.TL_CONSTRAINT
TL_CONSTRAINT_SWAP = cvar.TL_CONSTRAINT_SWAP
TL_CONSTRAINT_BYFOE = cvar.TL_CONSTRAINT_BYFOE
TL_CONSTRAINT_REMOVE = cvar.TL_CONSTRAINT_REMOVE
LANE_LINK_NUMBER = cvar.LANE_LINK_NUMBER
LANE_EDGE_ID = cvar.LANE_EDGE_ID
LANE_LINKS = cvar.LANE_LINKS
LANE_ALLOWED = cvar.LANE_ALLOWED
LANE_DISALLOWED = cvar.LANE_DISALLOWED
VAR_FOES = cvar.VAR_FOES
VAR_SLOPE = cvar.VAR_SLOPE
VAR_SPEED = cvar.VAR_SPEED
VAR_PREV_SPEED = cvar.VAR_PREV_SPEED
VAR_SPEED_LAT = cvar.VAR_SPEED_LAT
VAR_MAXSPEED = cvar.VAR_MAXSPEED
VAR_POSITION = cvar.VAR_POSITION
VAR_POSITION3D = cvar.VAR_POSITION3D
VAR_ANGLE = cvar.VAR_ANGLE
VAR_LENGTH = cvar.VAR_LENGTH
VAR_COLOR = cvar.VAR_COLOR
VAR_ACCEL = cvar.VAR_ACCEL
VAR_DECEL = cvar.VAR_DECEL
VAR_EMERGENCY_DECEL = cvar.VAR_EMERGENCY_DECEL
VAR_APPARENT_DECEL = cvar.VAR_APPARENT_DECEL
VAR_ACTIONSTEPLENGTH = cvar.VAR_ACTIONSTEPLENGTH
VAR_LASTACTIONTIME = cvar.VAR_LASTACTIONTIME
VAR_TAU = cvar.VAR_TAU
VAR_VEHICLECLASS = cvar.VAR_VEHICLECLASS
VAR_EMISSIONCLASS = cvar.VAR_EMISSIONCLASS
VAR_SHAPECLASS = cvar.VAR_SHAPECLASS
VAR_MINGAP = cvar.VAR_MINGAP
VAR_WIDTH = cvar.VAR_WIDTH
VAR_SHAPE = cvar.VAR_SHAPE
VAR_TYPE = cvar.VAR_TYPE
VAR_ROAD_ID = cvar.VAR_ROAD_ID
VAR_LANE_ID = cvar.VAR_LANE_ID
VAR_LANE_INDEX = cvar.VAR_LANE_INDEX
VAR_ROUTE_ID = cvar.VAR_ROUTE_ID
VAR_EDGES = cvar.VAR_EDGES
VAR_LANES = cvar.VAR_LANES
VAR_UPDATE_BESTLANES = cvar.VAR_UPDATE_BESTLANES
VAR_FILL = cvar.VAR_FILL
VAR_IMAGEFILE = cvar.VAR_IMAGEFILE
VAR_LANEPOSITION = cvar.VAR_LANEPOSITION
VAR_ROUTE = cvar.VAR_ROUTE
VAR_EDGE_TRAVELTIME = cvar.VAR_EDGE_TRAVELTIME
VAR_EDGE_EFFORT = cvar.VAR_EDGE_EFFORT
VAR_CURRENT_TRAVELTIME = cvar.VAR_CURRENT_TRAVELTIME
VAR_SIGNALS = cvar.VAR_SIGNALS
VAR_MOVE_TO = cvar.VAR_MOVE_TO
VAR_ADD_DYNAMICS = cvar.VAR_ADD_DYNAMICS
VAR_HIGHLIGHT = cvar.VAR_HIGHLIGHT
VAR_IMPERFECTION = cvar.VAR_IMPERFECTION
VAR_SPEED_FACTOR = cvar.VAR_SPEED_FACTOR
VAR_SPEED_DEVIATION = cvar.VAR_SPEED_DEVIATION
VAR_ROUTING_MODE = cvar.VAR_ROUTING_MODE
VAR_SPEED_WITHOUT_TRACI = cvar.VAR_SPEED_WITHOUT_TRACI
VAR_BEST_LANES = cvar.VAR_BEST_LANES
VAR_SPEEDSETMODE = cvar.VAR_SPEEDSETMODE
MOVE_TO_XY = cvar.MOVE_TO_XY
VAR_STOPSTATE = cvar.VAR_STOPSTATE
VAR_LANECHANGE_MODE = cvar.VAR_LANECHANGE_MODE
VAR_ALLOWED_SPEED = cvar.VAR_ALLOWED_SPEED
VAR_LANEPOSITION_LAT = cvar.VAR_LANEPOSITION_LAT
VAR_LATALIGNMENT = cvar.VAR_LATALIGNMENT
VAR_MAXSPEED_LAT = cvar.VAR_MAXSPEED_LAT
VAR_MINGAP_LAT = cvar.VAR_MINGAP_LAT
VAR_HEIGHT = cvar.VAR_HEIGHT
VAR_LINE = cvar.VAR_LINE
VAR_VIA = cvar.VAR_VIA
VAR_NEIGHBORS = cvar.VAR_NEIGHBORS
VAR_CO2EMISSION = cvar.VAR_CO2EMISSION
VAR_COEMISSION = cvar.VAR_COEMISSION
VAR_HCEMISSION = cvar.VAR_HCEMISSION
VAR_PMXEMISSION = cvar.VAR_PMXEMISSION
VAR_NOXEMISSION = cvar.VAR_NOXEMISSION
VAR_FUELCONSUMPTION = cvar.VAR_FUELCONSUMPTION
VAR_NOISEEMISSION = cvar.VAR_NOISEEMISSION
VAR_PERSON_NUMBER = cvar.VAR_PERSON_NUMBER
VAR_PERSON_CAPACITY = cvar.VAR_PERSON_CAPACITY
VAR_BUS_STOP_ID_LIST = cvar.VAR_BUS_STOP_ID_LIST
VAR_BUS_STOP_WAITING = cvar.VAR_BUS_STOP_WAITING
VAR_BUS_STOP_WAITING_IDS = cvar.VAR_BUS_STOP_WAITING_IDS
VAR_LEADER = cvar.VAR_LEADER
VAR_FOLLOWER = cvar.VAR_FOLLOWER
VAR_ROUTE_INDEX = cvar.VAR_ROUTE_INDEX
VAR_WAITING_TIME = cvar.VAR_WAITING_TIME
VAR_ACCUMULATED_WAITING_TIME = cvar.VAR_ACCUMULATED_WAITING_TIME
VAR_NEXT_TLS = cvar.VAR_NEXT_TLS
VAR_NEXT_STOPS = cvar.VAR_NEXT_STOPS
VAR_NEXT_STOPS2 = cvar.VAR_NEXT_STOPS2
VAR_ACCELERATION = cvar.VAR_ACCELERATION
VAR_ARRIVALPOS = cvar.VAR_ARRIVALPOS
VAR_ARRIVALLANE = cvar.VAR_ARRIVALLANE
VAR_ARRIVALSPEED = cvar.VAR_ARRIVALSPEED
CMD_MESSAGE = cvar.CMD_MESSAGE
VAR_TIME = cvar.VAR_TIME
VAR_TIME_STEP = cvar.VAR_TIME_STEP
VAR_ELECTRICITYCONSUMPTION = cvar.VAR_ELECTRICITYCONSUMPTION
VAR_LOADED_VEHICLES_NUMBER = cvar.VAR_LOADED_VEHICLES_NUMBER
VAR_LOADED_VEHICLES_IDS = cvar.VAR_LOADED_VEHICLES_IDS
VAR_DEPARTED_VEHICLES_NUMBER = cvar.VAR_DEPARTED_VEHICLES_NUMBER
VAR_DEPARTED_VEHICLES_IDS = cvar.VAR_DEPARTED_VEHICLES_IDS
VAR_TELEPORT_STARTING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_STARTING_VEHICLES_NUMBER
VAR_TELEPORT_STARTING_VEHICLES_IDS = cvar.VAR_TELEPORT_STARTING_VEHICLES_IDS
VAR_TELEPORT_ENDING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_ENDING_VEHICLES_NUMBER
VAR_TELEPORT_ENDING_VEHICLES_IDS = cvar.VAR_TELEPORT_ENDING_VEHICLES_IDS
VAR_ARRIVED_VEHICLES_NUMBER = cvar.VAR_ARRIVED_VEHICLES_NUMBER
VAR_ARRIVED_VEHICLES_IDS = cvar.VAR_ARRIVED_VEHICLES_IDS
VAR_DELTA_T = cvar.VAR_DELTA_T
VAR_NET_BOUNDING_BOX = cvar.VAR_NET_BOUNDING_BOX
VAR_MIN_EXPECTED_VEHICLES = cvar.VAR_MIN_EXPECTED_VEHICLES
VAR_DEPARTED_PERSONS_NUMBER = cvar.VAR_DEPARTED_PERSONS_NUMBER
VAR_DEPARTED_PERSONS_IDS = cvar.VAR_DEPARTED_PERSONS_IDS
VAR_ARRIVED_PERSONS_NUMBER = cvar.VAR_ARRIVED_PERSONS_NUMBER
VAR_ARRIVED_PERSONS_IDS = cvar.VAR_ARRIVED_PERSONS_IDS
VAR_STOP_STARTING_VEHICLES_NUMBER = cvar.VAR_STOP_STARTING_VEHICLES_NUMBER
VAR_STOP_STARTING_VEHICLES_IDS = cvar.VAR_STOP_STARTING_VEHICLES_IDS
VAR_STOP_ENDING_VEHICLES_NUMBER = cvar.VAR_STOP_ENDING_VEHICLES_NUMBER
VAR_STOP_ENDING_VEHICLES_IDS = cvar.VAR_STOP_ENDING_VEHICLES_IDS
VAR_PARKING_STARTING_VEHICLES_NUMBER = cvar.VAR_PARKING_STARTING_VEHICLES_NUMBER
VAR_PARKING_STARTING_VEHICLES_IDS = cvar.VAR_PARKING_STARTING_VEHICLES_IDS
VAR_PARKING_MANEUVERING_VEHICLES_NUMBER = cvar.VAR_PARKING_MANEUVERING_VEHICLES_NUMBER
VAR_PARKING_MANEUVERING_VEHICLES_IDS = cvar.VAR_PARKING_MANEUVERING_VEHICLES_IDS
VAR_PARKING_ENDING_VEHICLES_NUMBER = cvar.VAR_PARKING_ENDING_VEHICLES_NUMBER
VAR_PARKING_ENDING_VEHICLES_IDS = cvar.VAR_PARKING_ENDING_VEHICLES_IDS
VAR_COLLIDING_VEHICLES_NUMBER = cvar.VAR_COLLIDING_VEHICLES_NUMBER
VAR_COLLIDING_VEHICLES_IDS = cvar.VAR_COLLIDING_VEHICLES_IDS
VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER
VAR_EMERGENCYSTOPPING_VEHICLES_IDS = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_IDS
CMD_CLEAR_PENDING_VEHICLES = cvar.CMD_CLEAR_PENDING_VEHICLES
VAR_PENDING_VEHICLES = cvar.VAR_PENDING_VEHICLES
CMD_SAVE_SIMSTATE = cvar.CMD_SAVE_SIMSTATE
CMD_LOAD_SIMSTATE = cvar.CMD_LOAD_SIMSTATE
VAR_COLLISIONS = cvar.VAR_COLLISIONS
VAR_PARAMETER = cvar.VAR_PARAMETER
VAR_PARAMETER_WITH_KEY = cvar.VAR_PARAMETER_WITH_KEY
ADD = cvar.ADD
REMOVE = cvar.REMOVE
COPY = cvar.COPY
POSITION_CONVERSION = cvar.POSITION_CONVERSION
DISTANCE_REQUEST = cvar.DISTANCE_REQUEST
VAR_DISTANCE = cvar.VAR_DISTANCE
ADD_FULL = cvar.ADD_FULL
FIND_ROUTE = cvar.FIND_ROUTE
FIND_INTERMODAL_ROUTE = cvar.FIND_INTERMODAL_ROUTE
CMD_REROUTE_TRAVELTIME = cvar.CMD_REROUTE_TRAVELTIME
CMD_REROUTE_EFFORT = cvar.CMD_REROUTE_EFFORT
VAR_ROUTE_VALID = cvar.VAR_ROUTE_VALID
VAR_STAGE = cvar.VAR_STAGE
VAR_NEXT_EDGE = cvar.VAR_NEXT_EDGE
VAR_STAGES_REMAINING = cvar.VAR_STAGES_REMAINING
VAR_VEHICLE = cvar.VAR_VEHICLE
APPEND_STAGE = cvar.APPEND_STAGE
REPLACE_STAGE = cvar.REPLACE_STAGE
REMOVE_STAGE = cvar.REMOVE_STAGE
VAR_TAXI_RESERVATIONS = cvar.VAR_TAXI_RESERVATIONS
SPLIT_TAXI_RESERVATIONS = cvar.SPLIT_TAXI_RESERVATIONS
VAR_SAMPLE_LAST = cvar.VAR_SAMPLE_LAST
VAR_SAMPLE_CURRENT = cvar.VAR_SAMPLE_CURRENT
VAR_VIEW_ZOOM = cvar.VAR_VIEW_ZOOM
VAR_VIEW_OFFSET = cvar.VAR_VIEW_OFFSET
VAR_VIEW_SCHEMA = cvar.VAR_VIEW_SCHEMA
VAR_VIEW_BOUNDARY = cvar.VAR_VIEW_BOUNDARY
VAR_SELECT = cvar.VAR_SELECT
VAR_SCREENSHOT = cvar.VAR_SCREENSHOT
VAR_TRACK_VEHICLE = cvar.VAR_TRACK_VEHICLE
VAR_HAS_VIEW = cvar.VAR_HAS_VIEW

def trafficlight_getRedYellowGreenState(tlsID):
    return _libsumo.trafficlight_getRedYellowGreenState(tlsID)

def trafficlight_getAllProgramLogics(tlsID):
    return _libsumo.trafficlight_getAllProgramLogics(tlsID)

def trafficlight_getControlledJunctions(tlsID):
    return _libsumo.trafficlight_getControlledJunctions(tlsID)

def trafficlight_getControlledLanes(tlsID):
    return _libsumo.trafficlight_getControlledLanes(tlsID)

def trafficlight_getControlledLinks(tlsID):
    return _libsumo.trafficlight_getControlledLinks(tlsID)

def trafficlight_getProgram(tlsID):
    return _libsumo.trafficlight_getProgram(tlsID)

def trafficlight_getPhase(tlsID):
    return _libsumo.trafficlight_getPhase(tlsID)

def trafficlight_getPhaseName(tlsID):
    return _libsumo.trafficlight_getPhaseName(tlsID)

def trafficlight_getPhaseDuration(tlsID):
    return _libsumo.trafficlight_getPhaseDuration(tlsID)

def trafficlight_getNextSwitch(tlsID):
    return _libsumo.trafficlight_getNextSwitch(tlsID)

def trafficlight_getServedPersonCount(tlsID, index):
    return _libsumo.trafficlight_getServedPersonCount(tlsID, index)

def trafficlight_getBlockingVehicles(tlsID, linkIndex):
    return _libsumo.trafficlight_getBlockingVehicles(tlsID, linkIndex)

def trafficlight_getRivalVehicles(tlsID, linkIndex):
    return _libsumo.trafficlight_getRivalVehicles(tlsID, linkIndex)

def trafficlight_getPriorityVehicles(tlsID, linkIndex):
    return _libsumo.trafficlight_getPriorityVehicles(tlsID, linkIndex)

def trafficlight_getConstraints(*args, **kwargs):
    return _libsumo.trafficlight_getConstraints(*args, **kwargs)

def trafficlight_getConstraintsByFoe(*args, **kwargs):
    return _libsumo.trafficlight_getConstraintsByFoe(*args, **kwargs)

def trafficlight_getIDList():
    return _libsumo.trafficlight_getIDList()

def trafficlight_getIDCount():
    return _libsumo.trafficlight_getIDCount()

def trafficlight_getParameter(objectID, param):
    return _libsumo.trafficlight_getParameter(objectID, param)

def trafficlight_getParameterWithKey(objectID, key):
    return _libsumo.trafficlight_getParameterWithKey(objectID, key)

def trafficlight_setParameter(objectID, param, value):
    return _libsumo.trafficlight_setParameter(objectID, param, value)

def trafficlight_subscribe(*args, **kwargs):
    return _libsumo.trafficlight_subscribe(*args, **kwargs)

def trafficlight_unsubscribe(objectID):
    return _libsumo.trafficlight_unsubscribe(objectID)

def trafficlight_subscribeContext(*args, **kwargs):
    return _libsumo.trafficlight_subscribeContext(*args, **kwargs)

def trafficlight_unsubscribeContext(objectID, domain, dist):
    return _libsumo.trafficlight_unsubscribeContext(objectID, domain, dist)

def trafficlight_getAllSubscriptionResults():
    return _libsumo.trafficlight_getAllSubscriptionResults()

def trafficlight_getSubscriptionResults(objectID):
    return _libsumo.trafficlight_getSubscriptionResults(objectID)

def trafficlight_getAllContextSubscriptionResults():
    return _libsumo.trafficlight_getAllContextSubscriptionResults()

def trafficlight_getContextSubscriptionResults(objectID):
    return _libsumo.trafficlight_getContextSubscriptionResults(objectID)

def trafficlight_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.trafficlight_subscribeParameterWithKey(*args, **kwargs)

def trafficlight_setRedYellowGreenState(tlsID, state):
    return _libsumo.trafficlight_setRedYellowGreenState(tlsID, state)

def trafficlight_setPhase(tlsID, index):
    return _libsumo.trafficlight_setPhase(tlsID, index)

def trafficlight_setPhaseName(tlsID, name):
    return _libsumo.trafficlight_setPhaseName(tlsID, name)

def trafficlight_setProgram(tlsID, programID):
    return _libsumo.trafficlight_setProgram(tlsID, programID)

def trafficlight_setPhaseDuration(tlsID, phaseDuration):
    return _libsumo.trafficlight_setPhaseDuration(tlsID, phaseDuration)

def trafficlight_setProgramLogic(tlsID, logic):
    return _libsumo.trafficlight_setProgramLogic(tlsID, logic)

def trafficlight_swapConstraints(tlsID, tripId, foeSignal, foeId):
    return _libsumo.trafficlight_swapConstraints(tlsID, tripId, foeSignal, foeId)

def trafficlight_removeConstraints(tlsID, tripId, foeSignal, foeId):
    return _libsumo.trafficlight_removeConstraints(tlsID, tripId, foeSignal, foeId)

def trafficlight_getCompleteRedYellowGreenDefinition(tlsID):
    return _libsumo.trafficlight_getCompleteRedYellowGreenDefinition(tlsID)

def trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic):
    return _libsumo.trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic)

def trafficlight_makeWrapper():
    return _libsumo.trafficlight_makeWrapper()

def trafficlight_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.trafficlight_handleVariable(objID, variable, wrapper, paramData)

class vehicletype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLength(typeID):
        return _libsumo.vehicletype_getLength(typeID)

    @staticmethod
    def getMaxSpeed(typeID):
        return _libsumo.vehicletype_getMaxSpeed(typeID)

    @staticmethod
    def getActionStepLength(typeID):
        return _libsumo.vehicletype_getActionStepLength(typeID)

    @staticmethod
    def getSpeedFactor(typeID):
        return _libsumo.vehicletype_getSpeedFactor(typeID)

    @staticmethod
    def getSpeedDeviation(typeID):
        return _libsumo.vehicletype_getSpeedDeviation(typeID)

    @staticmethod
    def getAccel(typeID):
        return _libsumo.vehicletype_getAccel(typeID)

    @staticmethod
    def getDecel(typeID):
        return _libsumo.vehicletype_getDecel(typeID)

    @staticmethod
    def getEmergencyDecel(typeID):
        return _libsumo.vehicletype_getEmergencyDecel(typeID)

    @staticmethod
    def getApparentDecel(typeID):
        return _libsumo.vehicletype_getApparentDecel(typeID)

    @staticmethod
    def getImperfection(typeID):
        return _libsumo.vehicletype_getImperfection(typeID)

    @staticmethod
    def getTau(typeID):
        return _libsumo.vehicletype_getTau(typeID)

    @staticmethod
    def getVehicleClass(typeID):
        return _libsumo.vehicletype_getVehicleClass(typeID)

    @staticmethod
    def getEmissionClass(typeID):
        return _libsumo.vehicletype_getEmissionClass(typeID)

    @staticmethod
    def getShapeClass(typeID):
        return _libsumo.vehicletype_getShapeClass(typeID)

    @staticmethod
    def getMinGap(typeID):
        return _libsumo.vehicletype_getMinGap(typeID)

    @staticmethod
    def getWidth(typeID):
        return _libsumo.vehicletype_getWidth(typeID)

    @staticmethod
    def getHeight(typeID):
        return _libsumo.vehicletype_getHeight(typeID)

    @staticmethod
    def getColor(typeID):
        return _libsumo.vehicletype_getColor(typeID)

    @staticmethod
    def getMinGapLat(typeID):
        return _libsumo.vehicletype_getMinGapLat(typeID)

    @staticmethod
    def getMaxSpeedLat(typeID):
        return _libsumo.vehicletype_getMaxSpeedLat(typeID)

    @staticmethod
    def getLateralAlignment(typeID):
        return _libsumo.vehicletype_getLateralAlignment(typeID)

    @staticmethod
    def getPersonCapacity(typeID):
        return _libsumo.vehicletype_getPersonCapacity(typeID)

    @staticmethod
    def getIDList():
        return _libsumo.vehicletype_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.vehicletype_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.vehicletype_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.vehicletype_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.vehicletype_setParameter(objectID, param, value)

    @staticmethod
    def setLength(typeID, length):
        return _libsumo.vehicletype_setLength(typeID, length)

    @staticmethod
    def setMaxSpeed(typeID, speed):
        return _libsumo.vehicletype_setMaxSpeed(typeID, speed)

    @staticmethod
    def setVehicleClass(typeID, clazz):
        return _libsumo.vehicletype_setVehicleClass(typeID, clazz)

    @staticmethod
    def setSpeedFactor(typeID, factor):
        return _libsumo.vehicletype_setSpeedFactor(typeID, factor)

    @staticmethod
    def setEmissionClass(typeID, clazz):
        return _libsumo.vehicletype_setEmissionClass(typeID, clazz)

    @staticmethod
    def setShapeClass(typeID, shapeClass):
        return _libsumo.vehicletype_setShapeClass(typeID, shapeClass)

    @staticmethod
    def setWidth(typeID, width):
        return _libsumo.vehicletype_setWidth(typeID, width)

    @staticmethod
    def setHeight(typeID, height):
        return _libsumo.vehicletype_setHeight(typeID, height)

    @staticmethod
    def setMinGap(typeID, minGap):
        return _libsumo.vehicletype_setMinGap(typeID, minGap)

    @staticmethod
    def setAccel(typeID, accel):
        return _libsumo.vehicletype_setAccel(typeID, accel)

    @staticmethod
    def setDecel(typeID, decel):
        return _libsumo.vehicletype_setDecel(typeID, decel)

    @staticmethod
    def setEmergencyDecel(typeID, decel):
        return _libsumo.vehicletype_setEmergencyDecel(typeID, decel)

    @staticmethod
    def setApparentDecel(typeID, decel):
        return _libsumo.vehicletype_setApparentDecel(typeID, decel)

    @staticmethod
    def setImperfection(typeID, imperfection):
        return _libsumo.vehicletype_setImperfection(typeID, imperfection)

    @staticmethod
    def setTau(typeID, tau):
        return _libsumo.vehicletype_setTau(typeID, tau)

    @staticmethod
    def setColor(typeID, color):
        return _libsumo.vehicletype_setColor(typeID, color)

    @staticmethod
    def setMinGapLat(typeID, minGapLat):
        return _libsumo.vehicletype_setMinGapLat(typeID, minGapLat)

    @staticmethod
    def setMaxSpeedLat(typeID, speed):
        return _libsumo.vehicletype_setMaxSpeedLat(typeID, speed)

    @staticmethod
    def setLateralAlignment(typeID, latAlignment):
        return _libsumo.vehicletype_setLateralAlignment(typeID, latAlignment)

    @staticmethod
    def setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
        return _libsumo.vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset)

    @staticmethod
    def copy(origTypeID, newTypeID):
        return _libsumo.vehicletype_copy(origTypeID, newTypeID)

    @staticmethod
    def setSpeedDeviation(typeID, deviation):
        return _libsumo.vehicletype_setSpeedDeviation(typeID, deviation)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.vehicletype_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.vehicletype_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.vehicletype_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.vehicletype_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.vehicletype_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.vehicletype_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.vehicletype_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.vehicletype_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.vehicletype_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def getVType(id):
        return _libsumo.vehicletype_getVType(id)

    @staticmethod
    def makeWrapper():
        return _libsumo.vehicletype_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.vehicletype_handleVariable(objID, variable, wrapper, paramData)

    @staticmethod
    def handleVariableWithID(objID, typeID, variable, wrapper, paramData):
        return _libsumo.vehicletype_handleVariableWithID(objID, typeID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_vehicletype

# Register vehicletype in _libsumo:
_libsumo.vehicletype_swigregister(vehicletype)

def vehicletype_getLength(typeID):
    return _libsumo.vehicletype_getLength(typeID)

def vehicletype_getMaxSpeed(typeID):
    return _libsumo.vehicletype_getMaxSpeed(typeID)

def vehicletype_getActionStepLength(typeID):
    return _libsumo.vehicletype_getActionStepLength(typeID)

def vehicletype_getSpeedFactor(typeID):
    return _libsumo.vehicletype_getSpeedFactor(typeID)

def vehicletype_getSpeedDeviation(typeID):
    return _libsumo.vehicletype_getSpeedDeviation(typeID)

def vehicletype_getAccel(typeID):
    return _libsumo.vehicletype_getAccel(typeID)

def vehicletype_getDecel(typeID):
    return _libsumo.vehicletype_getDecel(typeID)

def vehicletype_getEmergencyDecel(typeID):
    return _libsumo.vehicletype_getEmergencyDecel(typeID)

def vehicletype_getApparentDecel(typeID):
    return _libsumo.vehicletype_getApparentDecel(typeID)

def vehicletype_getImperfection(typeID):
    return _libsumo.vehicletype_getImperfection(typeID)

def vehicletype_getTau(typeID):
    return _libsumo.vehicletype_getTau(typeID)

def vehicletype_getVehicleClass(typeID):
    return _libsumo.vehicletype_getVehicleClass(typeID)

def vehicletype_getEmissionClass(typeID):
    return _libsumo.vehicletype_getEmissionClass(typeID)

def vehicletype_getShapeClass(typeID):
    return _libsumo.vehicletype_getShapeClass(typeID)

def vehicletype_getMinGap(typeID):
    return _libsumo.vehicletype_getMinGap(typeID)

def vehicletype_getWidth(typeID):
    return _libsumo.vehicletype_getWidth(typeID)

def vehicletype_getHeight(typeID):
    return _libsumo.vehicletype_getHeight(typeID)

def vehicletype_getColor(typeID):
    return _libsumo.vehicletype_getColor(typeID)

def vehicletype_getMinGapLat(typeID):
    return _libsumo.vehicletype_getMinGapLat(typeID)

def vehicletype_getMaxSpeedLat(typeID):
    return _libsumo.vehicletype_getMaxSpeedLat(typeID)

def vehicletype_getLateralAlignment(typeID):
    return _libsumo.vehicletype_getLateralAlignment(typeID)

def vehicletype_getPersonCapacity(typeID):
    return _libsumo.vehicletype_getPersonCapacity(typeID)

def vehicletype_getIDList():
    return _libsumo.vehicletype_getIDList()

def vehicletype_getIDCount():
    return _libsumo.vehicletype_getIDCount()

def vehicletype_getParameter(objectID, param):
    return _libsumo.vehicletype_getParameter(objectID, param)

def vehicletype_getParameterWithKey(objectID, key):
    return _libsumo.vehicletype_getParameterWithKey(objectID, key)

def vehicletype_setParameter(objectID, param, value):
    return _libsumo.vehicletype_setParameter(objectID, param, value)

def vehicletype_setLength(typeID, length):
    return _libsumo.vehicletype_setLength(typeID, length)

def vehicletype_setMaxSpeed(typeID, speed):
    return _libsumo.vehicletype_setMaxSpeed(typeID, speed)

def vehicletype_setVehicleClass(typeID, clazz):
    return _libsumo.vehicletype_setVehicleClass(typeID, clazz)

def vehicletype_setSpeedFactor(typeID, factor):
    return _libsumo.vehicletype_setSpeedFactor(typeID, factor)

def vehicletype_setEmissionClass(typeID, clazz):
    return _libsumo.vehicletype_setEmissionClass(typeID, clazz)

def vehicletype_setShapeClass(typeID, shapeClass):
    return _libsumo.vehicletype_setShapeClass(typeID, shapeClass)

def vehicletype_setWidth(typeID, width):
    return _libsumo.vehicletype_setWidth(typeID, width)

def vehicletype_setHeight(typeID, height):
    return _libsumo.vehicletype_setHeight(typeID, height)

def vehicletype_setMinGap(typeID, minGap):
    return _libsumo.vehicletype_setMinGap(typeID, minGap)

def vehicletype_setAccel(typeID, accel):
    return _libsumo.vehicletype_setAccel(typeID, accel)

def vehicletype_setDecel(typeID, decel):
    return _libsumo.vehicletype_setDecel(typeID, decel)

def vehicletype_setEmergencyDecel(typeID, decel):
    return _libsumo.vehicletype_setEmergencyDecel(typeID, decel)

def vehicletype_setApparentDecel(typeID, decel):
    return _libsumo.vehicletype_setApparentDecel(typeID, decel)

def vehicletype_setImperfection(typeID, imperfection):
    return _libsumo.vehicletype_setImperfection(typeID, imperfection)

def vehicletype_setTau(typeID, tau):
    return _libsumo.vehicletype_setTau(typeID, tau)

def vehicletype_setColor(typeID, color):
    return _libsumo.vehicletype_setColor(typeID, color)

def vehicletype_setMinGapLat(typeID, minGapLat):
    return _libsumo.vehicletype_setMinGapLat(typeID, minGapLat)

def vehicletype_setMaxSpeedLat(typeID, speed):
    return _libsumo.vehicletype_setMaxSpeedLat(typeID, speed)

def vehicletype_setLateralAlignment(typeID, latAlignment):
    return _libsumo.vehicletype_setLateralAlignment(typeID, latAlignment)

def vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
    return _libsumo.vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset)

def vehicletype_copy(origTypeID, newTypeID):
    return _libsumo.vehicletype_copy(origTypeID, newTypeID)

def vehicletype_setSpeedDeviation(typeID, deviation):
    return _libsumo.vehicletype_setSpeedDeviation(typeID, deviation)

def vehicletype_subscribe(*args, **kwargs):
    return _libsumo.vehicletype_subscribe(*args, **kwargs)

def vehicletype_unsubscribe(objectID):
    return _libsumo.vehicletype_unsubscribe(objectID)

def vehicletype_subscribeContext(*args, **kwargs):
    return _libsumo.vehicletype_subscribeContext(*args, **kwargs)

def vehicletype_unsubscribeContext(objectID, domain, dist):
    return _libsumo.vehicletype_unsubscribeContext(objectID, domain, dist)

def vehicletype_getAllSubscriptionResults():
    return _libsumo.vehicletype_getAllSubscriptionResults()

def vehicletype_getSubscriptionResults(objectID):
    return _libsumo.vehicletype_getSubscriptionResults(objectID)

def vehicletype_getAllContextSubscriptionResults():
    return _libsumo.vehicletype_getAllContextSubscriptionResults()

def vehicletype_getContextSubscriptionResults(objectID):
    return _libsumo.vehicletype_getContextSubscriptionResults(objectID)

def vehicletype_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.vehicletype_subscribeParameterWithKey(*args, **kwargs)

def vehicletype_getVType(id):
    return _libsumo.vehicletype_getVType(id)

def vehicletype_makeWrapper():
    return _libsumo.vehicletype_makeWrapper()

def vehicletype_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.vehicletype_handleVariable(objID, variable, wrapper, paramData)

def vehicletype_handleVariableWithID(objID, typeID, variable, wrapper, paramData):
    return _libsumo.vehicletype_handleVariableWithID(objID, typeID, variable, wrapper, paramData)

class vehicle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSpeed(vehID):
        return _libsumo.vehicle_getSpeed(vehID)

    @staticmethod
    def getLateralSpeed(vehID):
        return _libsumo.vehicle_getLateralSpeed(vehID)

    @staticmethod
    def getAcceleration(vehID):
        return _libsumo.vehicle_getAcceleration(vehID)

    @staticmethod
    def getSpeedWithoutTraCI(vehID):
        return _libsumo.vehicle_getSpeedWithoutTraCI(vehID)

    @staticmethod
    def getPosition(vehID, includeZ=False):
        return _libsumo.vehicle_getPosition(vehID, includeZ)

    @staticmethod
    def getPosition3D(vehID):
        return _libsumo.vehicle_getPosition3D(vehID)

    @staticmethod
    def getAngle(vehID):
        return _libsumo.vehicle_getAngle(vehID)

    @staticmethod
    def getSlope(vehID):
        return _libsumo.vehicle_getSlope(vehID)

    @staticmethod
    def getRoadID(vehID):
        return _libsumo.vehicle_getRoadID(vehID)

    @staticmethod
    def getLaneID(vehID):
        return _libsumo.vehicle_getLaneID(vehID)

    @staticmethod
    def getLaneIndex(vehID):
        return _libsumo.vehicle_getLaneIndex(vehID)

    @staticmethod
    def getTypeID(vehID):
        return _libsumo.vehicle_getTypeID(vehID)

    @staticmethod
    def getRouteID(vehID):
        return _libsumo.vehicle_getRouteID(vehID)

    @staticmethod
    def getRouteIndex(vehID):
        return _libsumo.vehicle_getRouteIndex(vehID)

    @staticmethod
    def getLanePosition(vehID):
        return _libsumo.vehicle_getLanePosition(vehID)

    @staticmethod
    def getLateralLanePosition(vehID):
        return _libsumo.vehicle_getLateralLanePosition(vehID)

    @staticmethod
    def getCO2Emission(vehID):
        return _libsumo.vehicle_getCO2Emission(vehID)

    @staticmethod
    def getCOEmission(vehID):
        return _libsumo.vehicle_getCOEmission(vehID)

    @staticmethod
    def getHCEmission(vehID):
        return _libsumo.vehicle_getHCEmission(vehID)

    @staticmethod
    def getPMxEmission(vehID):
        return _libsumo.vehicle_getPMxEmission(vehID)

    @staticmethod
    def getNOxEmission(vehID):
        return _libsumo.vehicle_getNOxEmission(vehID)

    @staticmethod
    def getFuelConsumption(vehID):
        return _libsumo.vehicle_getFuelConsumption(vehID)

    @staticmethod
    def getNoiseEmission(vehID):
        return _libsumo.vehicle_getNoiseEmission(vehID)

    @staticmethod
    def getElectricityConsumption(vehID):
        return _libsumo.vehicle_getElectricityConsumption(vehID)

    @staticmethod
    def getPersonNumber(vehID):
        return _libsumo.vehicle_getPersonNumber(vehID)

    @staticmethod
    def getPersonIDList(vehID):
        return _libsumo.vehicle_getPersonIDList(vehID)

    @staticmethod
    def getLeader(vehID, dist=0.):
        val = _libsumo.vehicle_getLeader(vehID, dist)

        if val[0] == "" and vehicle._legacyGetLeader:
            return None


        return val

    @staticmethod
    def getFollower(vehID, dist=0.):
        return _libsumo.vehicle_getFollower(vehID, dist)

    @staticmethod
    def getWaitingTime(vehID):
        return _libsumo.vehicle_getWaitingTime(vehID)

    @staticmethod
    def getAccumulatedWaitingTime(vehID):
        return _libsumo.vehicle_getAccumulatedWaitingTime(vehID)

    @staticmethod
    def getAdaptedTraveltime(vehID, time, edgeID):
        return _libsumo.vehicle_getAdaptedTraveltime(vehID, time, edgeID)

    @staticmethod
    def getEffort(vehID, time, edgeID):
        return _libsumo.vehicle_getEffort(vehID, time, edgeID)

    @staticmethod
    def isRouteValid(vehID):
        return _libsumo.vehicle_isRouteValid(vehID)

    @staticmethod
    def getRoute(vehID):
        return _libsumo.vehicle_getRoute(vehID)

    @staticmethod
    def getSignals(vehID):
        return _libsumo.vehicle_getSignals(vehID)

    @staticmethod
    def getBestLanes(vehID):
        return _libsumo.vehicle_getBestLanes(vehID)

    @staticmethod
    def getNextTLS(vehID):
        return _libsumo.vehicle_getNextTLS(vehID)

    @staticmethod
    def getNextStops(vehID):
        return _libsumo.vehicle_getNextStops(vehID)

    @staticmethod
    def getStops(vehID, limit=0):
        return _libsumo.vehicle_getStops(vehID, limit)

    @staticmethod
    def getStopState(vehID):
        return _libsumo.vehicle_getStopState(vehID)

    @staticmethod
    def getDistance(vehID):
        return _libsumo.vehicle_getDistance(vehID)

    @staticmethod
    def getDrivingDistance(vehID, edgeID, position, laneIndex=0):
        return _libsumo.vehicle_getDrivingDistance(vehID, edgeID, position, laneIndex)

    @staticmethod
    def getDrivingDistance2D(vehID, x, y):
        return _libsumo.vehicle_getDrivingDistance2D(vehID, x, y)

    @staticmethod
    def getAllowedSpeed(vehID):
        return _libsumo.vehicle_getAllowedSpeed(vehID)

    @staticmethod
    def getSpeedMode(vehID):
        return _libsumo.vehicle_getSpeedMode(vehID)

    @staticmethod
    def getLaneChangeMode(vehID):
        return _libsumo.vehicle_getLaneChangeMode(vehID)

    @staticmethod
    def getRoutingMode(vehID):
        return _libsumo.vehicle_getRoutingMode(vehID)

    @staticmethod
    def getLine(vehID):
        return _libsumo.vehicle_getLine(vehID)

    @staticmethod
    def getVia(vehID):
        return _libsumo.vehicle_getVia(vehID)

    @staticmethod
    def getLaneChangeState(vehID, direction):
        return _libsumo.vehicle_getLaneChangeState(vehID, direction)

    @staticmethod
    def getLastActionTime(vehID):
        return _libsumo.vehicle_getLastActionTime(vehID)

    @staticmethod
    def getNeighbors(vehID, mode):
        return _libsumo.vehicle_getNeighbors(vehID, mode)

    @staticmethod
    def getFollowSpeed(*args, **kwargs):
        return _libsumo.vehicle_getFollowSpeed(*args, **kwargs)

    @staticmethod
    def getSecureGap(*args, **kwargs):
        return _libsumo.vehicle_getSecureGap(*args, **kwargs)

    @staticmethod
    def getStopSpeed(vehID, speed, gap):
        return _libsumo.vehicle_getStopSpeed(vehID, speed, gap)

    @staticmethod
    def getStopDelay(vehID):
        return _libsumo.vehicle_getStopDelay(vehID)

    @staticmethod
    def getStopArrivalDelay(vehID):
        return _libsumo.vehicle_getStopArrivalDelay(vehID)

    @staticmethod
    def getTimeLoss(vehID):
        return _libsumo.vehicle_getTimeLoss(vehID)

    @staticmethod
    def getTaxiFleet(taxiState=0):
        return _libsumo.vehicle_getTaxiFleet(taxiState)

    @staticmethod
    def getIDList():
        return _libsumo.vehicle_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.vehicle_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.vehicle_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.vehicle_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.vehicle_setParameter(objectID, param, value)

    @staticmethod
    def getLength(typeID):
        return _libsumo.vehicle_getLength(typeID)

    @staticmethod
    def getMaxSpeed(typeID):
        return _libsumo.vehicle_getMaxSpeed(typeID)

    @staticmethod
    def getActionStepLength(typeID):
        return _libsumo.vehicle_getActionStepLength(typeID)

    @staticmethod
    def getSpeedFactor(typeID):
        return _libsumo.vehicle_getSpeedFactor(typeID)

    @staticmethod
    def getSpeedDeviation(typeID):
        return _libsumo.vehicle_getSpeedDeviation(typeID)

    @staticmethod
    def getAccel(typeID):
        return _libsumo.vehicle_getAccel(typeID)

    @staticmethod
    def getDecel(typeID):
        return _libsumo.vehicle_getDecel(typeID)

    @staticmethod
    def getEmergencyDecel(typeID):
        return _libsumo.vehicle_getEmergencyDecel(typeID)

    @staticmethod
    def getApparentDecel(typeID):
        return _libsumo.vehicle_getApparentDecel(typeID)

    @staticmethod
    def getImperfection(typeID):
        return _libsumo.vehicle_getImperfection(typeID)

    @staticmethod
    def getTau(typeID):
        return _libsumo.vehicle_getTau(typeID)

    @staticmethod
    def getVehicleClass(typeID):
        return _libsumo.vehicle_getVehicleClass(typeID)

    @staticmethod
    def getEmissionClass(typeID):
        return _libsumo.vehicle_getEmissionClass(typeID)

    @staticmethod
    def getShapeClass(typeID):
        return _libsumo.vehicle_getShapeClass(typeID)

    @staticmethod
    def getMinGap(typeID):
        return _libsumo.vehicle_getMinGap(typeID)

    @staticmethod
    def getWidth(typeID):
        return _libsumo.vehicle_getWidth(typeID)

    @staticmethod
    def getHeight(typeID):
        return _libsumo.vehicle_getHeight(typeID)

    @staticmethod
    def getColor(typeID):
        return _libsumo.vehicle_getColor(typeID)

    @staticmethod
    def getMinGapLat(typeID):
        return _libsumo.vehicle_getMinGapLat(typeID)

    @staticmethod
    def getMaxSpeedLat(typeID):
        return _libsumo.vehicle_getMaxSpeedLat(typeID)

    @staticmethod
    def getLateralAlignment(typeID):
        return _libsumo.vehicle_getLateralAlignment(typeID)

    @staticmethod
    def getPersonCapacity(typeID):
        return _libsumo.vehicle_getPersonCapacity(typeID)

    @staticmethod
    def setStop(*args, **kwargs):
        return _libsumo.vehicle_setStop(*args, **kwargs)

    @staticmethod
    def replaceStop(*args, **kwargs):
        return _libsumo.vehicle_replaceStop(*args, **kwargs)

    @staticmethod
    def rerouteParkingArea(vehID, parkingAreaID):
        return _libsumo.vehicle_rerouteParkingArea(vehID, parkingAreaID)

    @staticmethod
    def resume(vehID):
        return _libsumo.vehicle_resume(vehID)

    @staticmethod
    def add(*args, **kwargs):

        args = [str(a) for a in args[:13]] + list(args[13:])
        for key, val in kwargs.items():
            if key not in ("personCapacity", "personNumber"):
                kwargs[key] = str(val)


        return _libsumo.vehicle_add(*args, **kwargs)

    @staticmethod
    def changeTarget(vehID, edgeID):
        return _libsumo.vehicle_changeTarget(vehID, edgeID)

    @staticmethod
    def changeLane(vehID, laneIndex, duration):
        return _libsumo.vehicle_changeLane(vehID, laneIndex, duration)

    @staticmethod
    def changeLaneRelative(vehID, indexOffset, duration):
        return _libsumo.vehicle_changeLaneRelative(vehID, indexOffset, duration)

    @staticmethod
    def changeSublane(vehID, latDist):
        return _libsumo.vehicle_changeSublane(vehID, latDist)

    @staticmethod
    def slowDown(vehID, speed, duration):
        return _libsumo.vehicle_slowDown(vehID, speed, duration)

    @staticmethod
    def openGap(*args, **kwargs):
        return _libsumo.vehicle_openGap(*args, **kwargs)

    @staticmethod
    def deactivateGapControl(vehID):
        return _libsumo.vehicle_deactivateGapControl(vehID)

    @staticmethod
    def requestToC(vehID, leadTime):
        return _libsumo.vehicle_requestToC(vehID, leadTime)

    @staticmethod
    def setSpeed(vehID, speed):
        return _libsumo.vehicle_setSpeed(vehID, speed)

    @staticmethod
    def setPreviousSpeed(vehID, prevspeed):
        return _libsumo.vehicle_setPreviousSpeed(vehID, prevspeed)

    @staticmethod
    def setSpeedMode(vehID, speedMode):
        return _libsumo.vehicle_setSpeedMode(vehID, speedMode)

    @staticmethod
    def setLaneChangeMode(vehID, laneChangeMode):
        return _libsumo.vehicle_setLaneChangeMode(vehID, laneChangeMode)

    @staticmethod
    def setRoutingMode(vehID, routingMode):
        return _libsumo.vehicle_setRoutingMode(vehID, routingMode)

    @staticmethod
    def setType(vehID, typeID):
        return _libsumo.vehicle_setType(vehID, typeID)

    @staticmethod
    def setRouteID(vehID, routeID):
        return _libsumo.vehicle_setRouteID(vehID, routeID)

    @staticmethod
    def setRoute(*args):
        return _libsumo.vehicle_setRoute(*args)

    @staticmethod
    def updateBestLanes(vehID):
        return _libsumo.vehicle_updateBestLanes(vehID)

    @staticmethod
    def setAdaptedTraveltime(*args, **kwargs):
        return _libsumo.vehicle_setAdaptedTraveltime(*args, **kwargs)

    @staticmethod
    def setEffort(*args, **kwargs):
        return _libsumo.vehicle_setEffort(*args, **kwargs)

    @staticmethod
    def rerouteTraveltime(vehID, currentTravelTimes=True):
        return _libsumo.vehicle_rerouteTraveltime(vehID, currentTravelTimes)

    @staticmethod
    def rerouteEffort(vehID):
        return _libsumo.vehicle_rerouteEffort(vehID)

    @staticmethod
    def setSignals(vehID, signals):
        return _libsumo.vehicle_setSignals(vehID, signals)

    @staticmethod
    def moveTo(*args, **kwargs):
        return _libsumo.vehicle_moveTo(*args, **kwargs)

    @staticmethod
    def moveToXY(*args, **kwargs):
        return _libsumo.vehicle_moveToXY(*args, **kwargs)

    @staticmethod
    def remove(*args, **kwargs):
        return _libsumo.vehicle_remove(*args, **kwargs)

    @staticmethod
    def setLine(vehID, line):
        return _libsumo.vehicle_setLine(vehID, line)

    @staticmethod
    def setVia(vehID, via):
        return _libsumo.vehicle_setVia(vehID, via)

    @staticmethod
    def highlight(*args, **kwargs):
        return _libsumo.vehicle_highlight(*args, **kwargs)

    @staticmethod
    def dispatchTaxi(vehID, reservations):
        return _libsumo.vehicle_dispatchTaxi(vehID, reservations)

    @staticmethod
    def setLength(typeID, length):
        return _libsumo.vehicle_setLength(typeID, length)

    @staticmethod
    def setMaxSpeed(typeID, speed):
        return _libsumo.vehicle_setMaxSpeed(typeID, speed)

    @staticmethod
    def setVehicleClass(typeID, clazz):
        return _libsumo.vehicle_setVehicleClass(typeID, clazz)

    @staticmethod
    def setSpeedFactor(typeID, factor):
        return _libsumo.vehicle_setSpeedFactor(typeID, factor)

    @staticmethod
    def setEmissionClass(typeID, clazz):
        return _libsumo.vehicle_setEmissionClass(typeID, clazz)

    @staticmethod
    def setShapeClass(typeID, shapeClass):
        return _libsumo.vehicle_setShapeClass(typeID, shapeClass)

    @staticmethod
    def setWidth(typeID, width):
        return _libsumo.vehicle_setWidth(typeID, width)

    @staticmethod
    def setHeight(typeID, height):
        return _libsumo.vehicle_setHeight(typeID, height)

    @staticmethod
    def setMinGap(typeID, minGap):
        return _libsumo.vehicle_setMinGap(typeID, minGap)

    @staticmethod
    def setAccel(typeID, accel):
        return _libsumo.vehicle_setAccel(typeID, accel)

    @staticmethod
    def setDecel(typeID, decel):
        return _libsumo.vehicle_setDecel(typeID, decel)

    @staticmethod
    def setEmergencyDecel(typeID, decel):
        return _libsumo.vehicle_setEmergencyDecel(typeID, decel)

    @staticmethod
    def setApparentDecel(typeID, decel):
        return _libsumo.vehicle_setApparentDecel(typeID, decel)

    @staticmethod
    def setImperfection(typeID, imperfection):
        return _libsumo.vehicle_setImperfection(typeID, imperfection)

    @staticmethod
    def setTau(typeID, tau):
        return _libsumo.vehicle_setTau(typeID, tau)

    @staticmethod
    def setColor(typeID, color):
        return _libsumo.vehicle_setColor(typeID, color)

    @staticmethod
    def setMinGapLat(typeID, minGapLat):
        return _libsumo.vehicle_setMinGapLat(typeID, minGapLat)

    @staticmethod
    def setMaxSpeedLat(typeID, speed):
        return _libsumo.vehicle_setMaxSpeedLat(typeID, speed)

    @staticmethod
    def setLateralAlignment(typeID, latAlignment):
        return _libsumo.vehicle_setLateralAlignment(typeID, latAlignment)

    @staticmethod
    def setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
        return _libsumo.vehicle_setActionStepLength(typeID, actionStepLength, resetActionOffset)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.vehicle_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.vehicle_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.vehicle_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.vehicle_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.vehicle_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.vehicle_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.vehicle_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.vehicle_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.vehicle_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def subscribeLeader(*args, **kwargs):
        return _libsumo.vehicle_subscribeLeader(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterLanes(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterLanes(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterNoOpposite():
        return _libsumo.vehicle_addSubscriptionFilterNoOpposite()

    @staticmethod
    def addSubscriptionFilterDownstreamDistance(dist):
        return _libsumo.vehicle_addSubscriptionFilterDownstreamDistance(dist)

    @staticmethod
    def addSubscriptionFilterUpstreamDistance(dist):
        return _libsumo.vehicle_addSubscriptionFilterUpstreamDistance(dist)

    @staticmethod
    def addSubscriptionFilterCFManeuver(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterCFManeuver(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterLCManeuver(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterLCManeuver(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterLeadFollow(lanes):
        return _libsumo.vehicle_addSubscriptionFilterLeadFollow(lanes)

    @staticmethod
    def addSubscriptionFilterTurn(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterTurn(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterVClass(vClasses):
        return _libsumo.vehicle_addSubscriptionFilterVClass(vClasses)

    @staticmethod
    def addSubscriptionFilterVType(vTypes):
        return _libsumo.vehicle_addSubscriptionFilterVType(vTypes)

    @staticmethod
    def addSubscriptionFilterFieldOfVision(openingAngle):
        return _libsumo.vehicle_addSubscriptionFilterFieldOfVision(openingAngle)

    @staticmethod
    def addSubscriptionFilterLateralDistance(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterLateralDistance(*args, **kwargs)

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.vehicle_storeShape(id, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.vehicle_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.vehicle_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_vehicle

# Register vehicle in _libsumo:
_libsumo.vehicle_swigregister(vehicle)

def vehicle_getSpeed(vehID):
    return _libsumo.vehicle_getSpeed(vehID)

def vehicle_getLateralSpeed(vehID):
    return _libsumo.vehicle_getLateralSpeed(vehID)

def vehicle_getAcceleration(vehID):
    return _libsumo.vehicle_getAcceleration(vehID)

def vehicle_getSpeedWithoutTraCI(vehID):
    return _libsumo.vehicle_getSpeedWithoutTraCI(vehID)

def vehicle_getPosition(vehID, includeZ=False):
    return _libsumo.vehicle_getPosition(vehID, includeZ)

def vehicle_getPosition3D(vehID):
    return _libsumo.vehicle_getPosition3D(vehID)

def vehicle_getAngle(vehID):
    return _libsumo.vehicle_getAngle(vehID)

def vehicle_getSlope(vehID):
    return _libsumo.vehicle_getSlope(vehID)

def vehicle_getRoadID(vehID):
    return _libsumo.vehicle_getRoadID(vehID)

def vehicle_getLaneID(vehID):
    return _libsumo.vehicle_getLaneID(vehID)

def vehicle_getLaneIndex(vehID):
    return _libsumo.vehicle_getLaneIndex(vehID)

def vehicle_getTypeID(vehID):
    return _libsumo.vehicle_getTypeID(vehID)

def vehicle_getRouteID(vehID):
    return _libsumo.vehicle_getRouteID(vehID)

def vehicle_getRouteIndex(vehID):
    return _libsumo.vehicle_getRouteIndex(vehID)

def vehicle_getLanePosition(vehID):
    return _libsumo.vehicle_getLanePosition(vehID)

def vehicle_getLateralLanePosition(vehID):
    return _libsumo.vehicle_getLateralLanePosition(vehID)

def vehicle_getCO2Emission(vehID):
    return _libsumo.vehicle_getCO2Emission(vehID)

def vehicle_getCOEmission(vehID):
    return _libsumo.vehicle_getCOEmission(vehID)

def vehicle_getHCEmission(vehID):
    return _libsumo.vehicle_getHCEmission(vehID)

def vehicle_getPMxEmission(vehID):
    return _libsumo.vehicle_getPMxEmission(vehID)

def vehicle_getNOxEmission(vehID):
    return _libsumo.vehicle_getNOxEmission(vehID)

def vehicle_getFuelConsumption(vehID):
    return _libsumo.vehicle_getFuelConsumption(vehID)

def vehicle_getNoiseEmission(vehID):
    return _libsumo.vehicle_getNoiseEmission(vehID)

def vehicle_getElectricityConsumption(vehID):
    return _libsumo.vehicle_getElectricityConsumption(vehID)

def vehicle_getPersonNumber(vehID):
    return _libsumo.vehicle_getPersonNumber(vehID)

def vehicle_getPersonIDList(vehID):
    return _libsumo.vehicle_getPersonIDList(vehID)

def vehicle_getLeader(vehID, dist=0.):
    val = _libsumo.vehicle_getLeader(vehID, dist)

    if val[0] == "" and vehicle._legacyGetLeader:
        return None


    return val

def vehicle_getFollower(vehID, dist=0.):
    return _libsumo.vehicle_getFollower(vehID, dist)

def vehicle_getWaitingTime(vehID):
    return _libsumo.vehicle_getWaitingTime(vehID)

def vehicle_getAccumulatedWaitingTime(vehID):
    return _libsumo.vehicle_getAccumulatedWaitingTime(vehID)

def vehicle_getAdaptedTraveltime(vehID, time, edgeID):
    return _libsumo.vehicle_getAdaptedTraveltime(vehID, time, edgeID)

def vehicle_getEffort(vehID, time, edgeID):
    return _libsumo.vehicle_getEffort(vehID, time, edgeID)

def vehicle_isRouteValid(vehID):
    return _libsumo.vehicle_isRouteValid(vehID)

def vehicle_getRoute(vehID):
    return _libsumo.vehicle_getRoute(vehID)

def vehicle_getSignals(vehID):
    return _libsumo.vehicle_getSignals(vehID)

def vehicle_getBestLanes(vehID):
    return _libsumo.vehicle_getBestLanes(vehID)

def vehicle_getNextTLS(vehID):
    return _libsumo.vehicle_getNextTLS(vehID)

def vehicle_getNextStops(vehID):
    return _libsumo.vehicle_getNextStops(vehID)

def vehicle_getStops(vehID, limit=0):
    return _libsumo.vehicle_getStops(vehID, limit)

def vehicle_getStopState(vehID):
    return _libsumo.vehicle_getStopState(vehID)

def vehicle_getDistance(vehID):
    return _libsumo.vehicle_getDistance(vehID)

def vehicle_getDrivingDistance(vehID, edgeID, position, laneIndex=0):
    return _libsumo.vehicle_getDrivingDistance(vehID, edgeID, position, laneIndex)

def vehicle_getDrivingDistance2D(vehID, x, y):
    return _libsumo.vehicle_getDrivingDistance2D(vehID, x, y)

def vehicle_getAllowedSpeed(vehID):
    return _libsumo.vehicle_getAllowedSpeed(vehID)

def vehicle_getSpeedMode(vehID):
    return _libsumo.vehicle_getSpeedMode(vehID)

def vehicle_getLaneChangeMode(vehID):
    return _libsumo.vehicle_getLaneChangeMode(vehID)

def vehicle_getRoutingMode(vehID):
    return _libsumo.vehicle_getRoutingMode(vehID)

def vehicle_getLine(vehID):
    return _libsumo.vehicle_getLine(vehID)

def vehicle_getVia(vehID):
    return _libsumo.vehicle_getVia(vehID)

def vehicle_getLaneChangeState(vehID, direction):
    return _libsumo.vehicle_getLaneChangeState(vehID, direction)

def vehicle_getLastActionTime(vehID):
    return _libsumo.vehicle_getLastActionTime(vehID)

def vehicle_getNeighbors(vehID, mode):
    return _libsumo.vehicle_getNeighbors(vehID, mode)

def vehicle_getFollowSpeed(*args, **kwargs):
    return _libsumo.vehicle_getFollowSpeed(*args, **kwargs)

def vehicle_getSecureGap(*args, **kwargs):
    return _libsumo.vehicle_getSecureGap(*args, **kwargs)

def vehicle_getStopSpeed(vehID, speed, gap):
    return _libsumo.vehicle_getStopSpeed(vehID, speed, gap)

def vehicle_getStopDelay(vehID):
    return _libsumo.vehicle_getStopDelay(vehID)

def vehicle_getStopArrivalDelay(vehID):
    return _libsumo.vehicle_getStopArrivalDelay(vehID)

def vehicle_getTimeLoss(vehID):
    return _libsumo.vehicle_getTimeLoss(vehID)

def vehicle_getTaxiFleet(taxiState=0):
    return _libsumo.vehicle_getTaxiFleet(taxiState)

def vehicle_getIDList():
    return _libsumo.vehicle_getIDList()

def vehicle_getIDCount():
    return _libsumo.vehicle_getIDCount()

def vehicle_getParameter(objectID, param):
    return _libsumo.vehicle_getParameter(objectID, param)

def vehicle_getParameterWithKey(objectID, key):
    return _libsumo.vehicle_getParameterWithKey(objectID, key)

def vehicle_setParameter(objectID, param, value):
    return _libsumo.vehicle_setParameter(objectID, param, value)

def vehicle_getLength(typeID):
    return _libsumo.vehicle_getLength(typeID)

def vehicle_getMaxSpeed(typeID):
    return _libsumo.vehicle_getMaxSpeed(typeID)

def vehicle_getActionStepLength(typeID):
    return _libsumo.vehicle_getActionStepLength(typeID)

def vehicle_getSpeedFactor(typeID):
    return _libsumo.vehicle_getSpeedFactor(typeID)

def vehicle_getSpeedDeviation(typeID):
    return _libsumo.vehicle_getSpeedDeviation(typeID)

def vehicle_getAccel(typeID):
    return _libsumo.vehicle_getAccel(typeID)

def vehicle_getDecel(typeID):
    return _libsumo.vehicle_getDecel(typeID)

def vehicle_getEmergencyDecel(typeID):
    return _libsumo.vehicle_getEmergencyDecel(typeID)

def vehicle_getApparentDecel(typeID):
    return _libsumo.vehicle_getApparentDecel(typeID)

def vehicle_getImperfection(typeID):
    return _libsumo.vehicle_getImperfection(typeID)

def vehicle_getTau(typeID):
    return _libsumo.vehicle_getTau(typeID)

def vehicle_getVehicleClass(typeID):
    return _libsumo.vehicle_getVehicleClass(typeID)

def vehicle_getEmissionClass(typeID):
    return _libsumo.vehicle_getEmissionClass(typeID)

def vehicle_getShapeClass(typeID):
    return _libsumo.vehicle_getShapeClass(typeID)

def vehicle_getMinGap(typeID):
    return _libsumo.vehicle_getMinGap(typeID)

def vehicle_getWidth(typeID):
    return _libsumo.vehicle_getWidth(typeID)

def vehicle_getHeight(typeID):
    return _libsumo.vehicle_getHeight(typeID)

def vehicle_getColor(typeID):
    return _libsumo.vehicle_getColor(typeID)

def vehicle_getMinGapLat(typeID):
    return _libsumo.vehicle_getMinGapLat(typeID)

def vehicle_getMaxSpeedLat(typeID):
    return _libsumo.vehicle_getMaxSpeedLat(typeID)

def vehicle_getLateralAlignment(typeID):
    return _libsumo.vehicle_getLateralAlignment(typeID)

def vehicle_getPersonCapacity(typeID):
    return _libsumo.vehicle_getPersonCapacity(typeID)

def vehicle_setStop(*args, **kwargs):
    return _libsumo.vehicle_setStop(*args, **kwargs)

def vehicle_replaceStop(*args, **kwargs):
    return _libsumo.vehicle_replaceStop(*args, **kwargs)

def vehicle_rerouteParkingArea(vehID, parkingAreaID):
    return _libsumo.vehicle_rerouteParkingArea(vehID, parkingAreaID)

def vehicle_resume(vehID):
    return _libsumo.vehicle_resume(vehID)

def vehicle_add(*args, **kwargs):

    args = [str(a) for a in args[:13]] + list(args[13:])
    for key, val in kwargs.items():
        if key not in ("personCapacity", "personNumber"):
            kwargs[key] = str(val)


    return _libsumo.vehicle_add(*args, **kwargs)

def vehicle_changeTarget(vehID, edgeID):
    return _libsumo.vehicle_changeTarget(vehID, edgeID)

def vehicle_changeLane(vehID, laneIndex, duration):
    return _libsumo.vehicle_changeLane(vehID, laneIndex, duration)

def vehicle_changeLaneRelative(vehID, indexOffset, duration):
    return _libsumo.vehicle_changeLaneRelative(vehID, indexOffset, duration)

def vehicle_changeSublane(vehID, latDist):
    return _libsumo.vehicle_changeSublane(vehID, latDist)

def vehicle_slowDown(vehID, speed, duration):
    return _libsumo.vehicle_slowDown(vehID, speed, duration)

def vehicle_openGap(*args, **kwargs):
    return _libsumo.vehicle_openGap(*args, **kwargs)

def vehicle_deactivateGapControl(vehID):
    return _libsumo.vehicle_deactivateGapControl(vehID)

def vehicle_requestToC(vehID, leadTime):
    return _libsumo.vehicle_requestToC(vehID, leadTime)

def vehicle_setSpeed(vehID, speed):
    return _libsumo.vehicle_setSpeed(vehID, speed)

def vehicle_setPreviousSpeed(vehID, prevspeed):
    return _libsumo.vehicle_setPreviousSpeed(vehID, prevspeed)

def vehicle_setSpeedMode(vehID, speedMode):
    return _libsumo.vehicle_setSpeedMode(vehID, speedMode)

def vehicle_setLaneChangeMode(vehID, laneChangeMode):
    return _libsumo.vehicle_setLaneChangeMode(vehID, laneChangeMode)

def vehicle_setRoutingMode(vehID, routingMode):
    return _libsumo.vehicle_setRoutingMode(vehID, routingMode)

def vehicle_setType(vehID, typeID):
    return _libsumo.vehicle_setType(vehID, typeID)

def vehicle_setRouteID(vehID, routeID):
    return _libsumo.vehicle_setRouteID(vehID, routeID)

def vehicle_setRoute(*args):
    return _libsumo.vehicle_setRoute(*args)

def vehicle_updateBestLanes(vehID):
    return _libsumo.vehicle_updateBestLanes(vehID)

def vehicle_setAdaptedTraveltime(*args, **kwargs):
    return _libsumo.vehicle_setAdaptedTraveltime(*args, **kwargs)

def vehicle_setEffort(*args, **kwargs):
    return _libsumo.vehicle_setEffort(*args, **kwargs)

def vehicle_rerouteTraveltime(vehID, currentTravelTimes=True):
    return _libsumo.vehicle_rerouteTraveltime(vehID, currentTravelTimes)

def vehicle_rerouteEffort(vehID):
    return _libsumo.vehicle_rerouteEffort(vehID)

def vehicle_setSignals(vehID, signals):
    return _libsumo.vehicle_setSignals(vehID, signals)

def vehicle_moveTo(*args, **kwargs):
    return _libsumo.vehicle_moveTo(*args, **kwargs)

def vehicle_moveToXY(*args, **kwargs):
    return _libsumo.vehicle_moveToXY(*args, **kwargs)

def vehicle_remove(*args, **kwargs):
    return _libsumo.vehicle_remove(*args, **kwargs)

def vehicle_setLine(vehID, line):
    return _libsumo.vehicle_setLine(vehID, line)

def vehicle_setVia(vehID, via):
    return _libsumo.vehicle_setVia(vehID, via)

def vehicle_highlight(*args, **kwargs):
    return _libsumo.vehicle_highlight(*args, **kwargs)

def vehicle_dispatchTaxi(vehID, reservations):
    return _libsumo.vehicle_dispatchTaxi(vehID, reservations)

def vehicle_setLength(typeID, length):
    return _libsumo.vehicle_setLength(typeID, length)

def vehicle_setMaxSpeed(typeID, speed):
    return _libsumo.vehicle_setMaxSpeed(typeID, speed)

def vehicle_setVehicleClass(typeID, clazz):
    return _libsumo.vehicle_setVehicleClass(typeID, clazz)

def vehicle_setSpeedFactor(typeID, factor):
    return _libsumo.vehicle_setSpeedFactor(typeID, factor)

def vehicle_setEmissionClass(typeID, clazz):
    return _libsumo.vehicle_setEmissionClass(typeID, clazz)

def vehicle_setShapeClass(typeID, shapeClass):
    return _libsumo.vehicle_setShapeClass(typeID, shapeClass)

def vehicle_setWidth(typeID, width):
    return _libsumo.vehicle_setWidth(typeID, width)

def vehicle_setHeight(typeID, height):
    return _libsumo.vehicle_setHeight(typeID, height)

def vehicle_setMinGap(typeID, minGap):
    return _libsumo.vehicle_setMinGap(typeID, minGap)

def vehicle_setAccel(typeID, accel):
    return _libsumo.vehicle_setAccel(typeID, accel)

def vehicle_setDecel(typeID, decel):
    return _libsumo.vehicle_setDecel(typeID, decel)

def vehicle_setEmergencyDecel(typeID, decel):
    return _libsumo.vehicle_setEmergencyDecel(typeID, decel)

def vehicle_setApparentDecel(typeID, decel):
    return _libsumo.vehicle_setApparentDecel(typeID, decel)

def vehicle_setImperfection(typeID, imperfection):
    return _libsumo.vehicle_setImperfection(typeID, imperfection)

def vehicle_setTau(typeID, tau):
    return _libsumo.vehicle_setTau(typeID, tau)

def vehicle_setColor(typeID, color):
    return _libsumo.vehicle_setColor(typeID, color)

def vehicle_setMinGapLat(typeID, minGapLat):
    return _libsumo.vehicle_setMinGapLat(typeID, minGapLat)

def vehicle_setMaxSpeedLat(typeID, speed):
    return _libsumo.vehicle_setMaxSpeedLat(typeID, speed)

def vehicle_setLateralAlignment(typeID, latAlignment):
    return _libsumo.vehicle_setLateralAlignment(typeID, latAlignment)

def vehicle_setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
    return _libsumo.vehicle_setActionStepLength(typeID, actionStepLength, resetActionOffset)

def vehicle_subscribe(*args, **kwargs):
    return _libsumo.vehicle_subscribe(*args, **kwargs)

def vehicle_unsubscribe(objectID):
    return _libsumo.vehicle_unsubscribe(objectID)

def vehicle_subscribeContext(*args, **kwargs):
    return _libsumo.vehicle_subscribeContext(*args, **kwargs)

def vehicle_unsubscribeContext(objectID, domain, dist):
    return _libsumo.vehicle_unsubscribeContext(objectID, domain, dist)

def vehicle_getAllSubscriptionResults():
    return _libsumo.vehicle_getAllSubscriptionResults()

def vehicle_getSubscriptionResults(objectID):
    return _libsumo.vehicle_getSubscriptionResults(objectID)

def vehicle_getAllContextSubscriptionResults():
    return _libsumo.vehicle_getAllContextSubscriptionResults()

def vehicle_getContextSubscriptionResults(objectID):
    return _libsumo.vehicle_getContextSubscriptionResults(objectID)

def vehicle_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.vehicle_subscribeParameterWithKey(*args, **kwargs)

def vehicle_subscribeLeader(*args, **kwargs):
    return _libsumo.vehicle_subscribeLeader(*args, **kwargs)

def vehicle_addSubscriptionFilterLanes(*args, **kwargs):
    return _libsumo.vehicle_addSubscriptionFilterLanes(*args, **kwargs)

def vehicle_addSubscriptionFilterNoOpposite():
    return _libsumo.vehicle_addSubscriptionFilterNoOpposite()

def vehicle_addSubscriptionFilterDownstreamDistance(dist):
    return _libsumo.vehicle_addSubscriptionFilterDownstreamDistance(dist)

def vehicle_addSubscriptionFilterUpstreamDistance(dist):
    return _libsumo.vehicle_addSubscriptionFilterUpstreamDistance(dist)

def vehicle_addSubscriptionFilterCFManeuver(*args, **kwargs):
    return _libsumo.vehicle_addSubscriptionFilterCFManeuver(*args, **kwargs)

def vehicle_addSubscriptionFilterLCManeuver(*args, **kwargs):
    return _libsumo.vehicle_addSubscriptionFilterLCManeuver(*args, **kwargs)

def vehicle_addSubscriptionFilterLeadFollow(lanes):
    return _libsumo.vehicle_addSubscriptionFilterLeadFollow(lanes)

def vehicle_addSubscriptionFilterTurn(*args, **kwargs):
    return _libsumo.vehicle_addSubscriptionFilterTurn(*args, **kwargs)

def vehicle_addSubscriptionFilterVClass(vClasses):
    return _libsumo.vehicle_addSubscriptionFilterVClass(vClasses)

def vehicle_addSubscriptionFilterVType(vTypes):
    return _libsumo.vehicle_addSubscriptionFilterVType(vTypes)

def vehicle_addSubscriptionFilterFieldOfVision(openingAngle):
    return _libsumo.vehicle_addSubscriptionFilterFieldOfVision(openingAngle)

def vehicle_addSubscriptionFilterLateralDistance(*args, **kwargs):
    return _libsumo.vehicle_addSubscriptionFilterLateralDistance(*args, **kwargs)

def vehicle_storeShape(id, shape):
    return _libsumo.vehicle_storeShape(id, shape)

def vehicle_makeWrapper():
    return _libsumo.vehicle_makeWrapper()

def vehicle_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.vehicle_handleVariable(objID, variable, wrapper, paramData)

class person(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSpeed(personID):
        return _libsumo.person_getSpeed(personID)

    @staticmethod
    def getPosition(personID, includeZ=False):
        return _libsumo.person_getPosition(personID, includeZ)

    @staticmethod
    def getPosition3D(personID):
        return _libsumo.person_getPosition3D(personID)

    @staticmethod
    def getRoadID(personID):
        return _libsumo.person_getRoadID(personID)

    @staticmethod
    def getLaneID(personID):
        return _libsumo.person_getLaneID(personID)

    @staticmethod
    def getTypeID(personID):
        return _libsumo.person_getTypeID(personID)

    @staticmethod
    def getWaitingTime(personID):
        return _libsumo.person_getWaitingTime(personID)

    @staticmethod
    def getNextEdge(personID):
        return _libsumo.person_getNextEdge(personID)

    @staticmethod
    def getVehicle(personID):
        return _libsumo.person_getVehicle(personID)

    @staticmethod
    def getRemainingStages(personID):
        return _libsumo.person_getRemainingStages(personID)

    @staticmethod
    def getStage(personID, nextStageIndex=0):
        return _libsumo.person_getStage(personID, nextStageIndex)

    @staticmethod
    def getEdges(personID, nextStageIndex=0):
        return _libsumo.person_getEdges(personID, nextStageIndex)

    @staticmethod
    def getAngle(personID):
        return _libsumo.person_getAngle(personID)

    @staticmethod
    def getSlope(personID):
        return _libsumo.person_getSlope(personID)

    @staticmethod
    def getLanePosition(personID):
        return _libsumo.person_getLanePosition(personID)

    @staticmethod
    def getTaxiReservations(stateFilter=0):
        return _libsumo.person_getTaxiReservations(stateFilter)

    @staticmethod
    def splitTaxiReservation(reservationID, personIDs):
        return _libsumo.person_splitTaxiReservation(reservationID, personIDs)

    @staticmethod
    def getIDList():
        return _libsumo.person_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.person_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.person_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.person_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.person_setParameter(objectID, param, value)

    @staticmethod
    def getLength(typeID):
        return _libsumo.person_getLength(typeID)

    @staticmethod
    def getMaxSpeed(typeID):
        return _libsumo.person_getMaxSpeed(typeID)

    @staticmethod
    def getActionStepLength(typeID):
        return _libsumo.person_getActionStepLength(typeID)

    @staticmethod
    def getSpeedFactor(typeID):
        return _libsumo.person_getSpeedFactor(typeID)

    @staticmethod
    def getSpeedDeviation(typeID):
        return _libsumo.person_getSpeedDeviation(typeID)

    @staticmethod
    def getAccel(typeID):
        return _libsumo.person_getAccel(typeID)

    @staticmethod
    def getDecel(typeID):
        return _libsumo.person_getDecel(typeID)

    @staticmethod
    def getEmergencyDecel(typeID):
        return _libsumo.person_getEmergencyDecel(typeID)

    @staticmethod
    def getApparentDecel(typeID):
        return _libsumo.person_getApparentDecel(typeID)

    @staticmethod
    def getImperfection(typeID):
        return _libsumo.person_getImperfection(typeID)

    @staticmethod
    def getTau(typeID):
        return _libsumo.person_getTau(typeID)

    @staticmethod
    def getVehicleClass(typeID):
        return _libsumo.person_getVehicleClass(typeID)

    @staticmethod
    def getEmissionClass(typeID):
        return _libsumo.person_getEmissionClass(typeID)

    @staticmethod
    def getShapeClass(typeID):
        return _libsumo.person_getShapeClass(typeID)

    @staticmethod
    def getMinGap(typeID):
        return _libsumo.person_getMinGap(typeID)

    @staticmethod
    def getWidth(typeID):
        return _libsumo.person_getWidth(typeID)

    @staticmethod
    def getHeight(typeID):
        return _libsumo.person_getHeight(typeID)

    @staticmethod
    def getColor(typeID):
        return _libsumo.person_getColor(typeID)

    @staticmethod
    def getMinGapLat(typeID):
        return _libsumo.person_getMinGapLat(typeID)

    @staticmethod
    def getMaxSpeedLat(typeID):
        return _libsumo.person_getMaxSpeedLat(typeID)

    @staticmethod
    def getLateralAlignment(typeID):
        return _libsumo.person_getLateralAlignment(typeID)

    @staticmethod
    def getPersonCapacity(typeID):
        return _libsumo.person_getPersonCapacity(typeID)

    @staticmethod
    def add(*args, **kwargs):
        return _libsumo.person_add(*args, **kwargs)

    @staticmethod
    def appendStage(personID, stage):
        return _libsumo.person_appendStage(personID, stage)

    @staticmethod
    def replaceStage(personID, stageIndex, stage):
        return _libsumo.person_replaceStage(personID, stageIndex, stage)

    @staticmethod
    def appendWaitingStage(*args, **kwargs):
        return _libsumo.person_appendWaitingStage(*args, **kwargs)

    @staticmethod
    def appendWalkingStage(*args, **kwargs):
        return _libsumo.person_appendWalkingStage(*args, **kwargs)

    @staticmethod
    def appendDrivingStage(*args, **kwargs):
        return _libsumo.person_appendDrivingStage(*args, **kwargs)

    @staticmethod
    def removeStage(personID, nextStageIndex):
        return _libsumo.person_removeStage(personID, nextStageIndex)

    @staticmethod
    def rerouteTraveltime(personID):
        return _libsumo.person_rerouteTraveltime(personID)

    @staticmethod
    def moveTo(personID, edgeID, position):
        return _libsumo.person_moveTo(personID, edgeID, position)

    @staticmethod
    def moveToXY(*args, **kwargs):
        return _libsumo.person_moveToXY(*args, **kwargs)

    @staticmethod
    def setSpeed(personID, speed):
        return _libsumo.person_setSpeed(personID, speed)

    @staticmethod
    def setType(personID, typeID):
        return _libsumo.person_setType(personID, typeID)

    @staticmethod
    def setLength(typeID, length):
        return _libsumo.person_setLength(typeID, length)

    @staticmethod
    def setMaxSpeed(typeID, speed):
        return _libsumo.person_setMaxSpeed(typeID, speed)

    @staticmethod
    def setVehicleClass(typeID, clazz):
        return _libsumo.person_setVehicleClass(typeID, clazz)

    @staticmethod
    def setSpeedFactor(typeID, factor):
        return _libsumo.person_setSpeedFactor(typeID, factor)

    @staticmethod
    def setEmissionClass(typeID, clazz):
        return _libsumo.person_setEmissionClass(typeID, clazz)

    @staticmethod
    def setShapeClass(typeID, shapeClass):
        return _libsumo.person_setShapeClass(typeID, shapeClass)

    @staticmethod
    def setWidth(typeID, width):
        return _libsumo.person_setWidth(typeID, width)

    @staticmethod
    def setHeight(typeID, height):
        return _libsumo.person_setHeight(typeID, height)

    @staticmethod
    def setMinGap(typeID, minGap):
        return _libsumo.person_setMinGap(typeID, minGap)

    @staticmethod
    def setAccel(typeID, accel):
        return _libsumo.person_setAccel(typeID, accel)

    @staticmethod
    def setDecel(typeID, decel):
        return _libsumo.person_setDecel(typeID, decel)

    @staticmethod
    def setEmergencyDecel(typeID, decel):
        return _libsumo.person_setEmergencyDecel(typeID, decel)

    @staticmethod
    def setApparentDecel(typeID, decel):
        return _libsumo.person_setApparentDecel(typeID, decel)

    @staticmethod
    def setImperfection(typeID, imperfection):
        return _libsumo.person_setImperfection(typeID, imperfection)

    @staticmethod
    def setTau(typeID, tau):
        return _libsumo.person_setTau(typeID, tau)

    @staticmethod
    def setColor(typeID, color):
        return _libsumo.person_setColor(typeID, color)

    @staticmethod
    def setMinGapLat(typeID, minGapLat):
        return _libsumo.person_setMinGapLat(typeID, minGapLat)

    @staticmethod
    def setMaxSpeedLat(typeID, speed):
        return _libsumo.person_setMaxSpeedLat(typeID, speed)

    @staticmethod
    def setLateralAlignment(typeID, latAlignment):
        return _libsumo.person_setLateralAlignment(typeID, latAlignment)

    @staticmethod
    def setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
        return _libsumo.person_setActionStepLength(typeID, actionStepLength, resetActionOffset)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.person_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.person_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.person_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.person_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.person_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.person_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.person_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.person_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.person_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def storeShape(id, shape):
        return _libsumo.person_storeShape(id, shape)

    @staticmethod
    def makeWrapper():
        return _libsumo.person_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.person_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_person

# Register person in _libsumo:
_libsumo.person_swigregister(person)

def person_getSpeed(personID):
    return _libsumo.person_getSpeed(personID)

def person_getPosition(personID, includeZ=False):
    return _libsumo.person_getPosition(personID, includeZ)

def person_getPosition3D(personID):
    return _libsumo.person_getPosition3D(personID)

def person_getRoadID(personID):
    return _libsumo.person_getRoadID(personID)

def person_getLaneID(personID):
    return _libsumo.person_getLaneID(personID)

def person_getTypeID(personID):
    return _libsumo.person_getTypeID(personID)

def person_getWaitingTime(personID):
    return _libsumo.person_getWaitingTime(personID)

def person_getNextEdge(personID):
    return _libsumo.person_getNextEdge(personID)

def person_getVehicle(personID):
    return _libsumo.person_getVehicle(personID)

def person_getRemainingStages(personID):
    return _libsumo.person_getRemainingStages(personID)

def person_getStage(personID, nextStageIndex=0):
    return _libsumo.person_getStage(personID, nextStageIndex)

def person_getEdges(personID, nextStageIndex=0):
    return _libsumo.person_getEdges(personID, nextStageIndex)

def person_getAngle(personID):
    return _libsumo.person_getAngle(personID)

def person_getSlope(personID):
    return _libsumo.person_getSlope(personID)

def person_getLanePosition(personID):
    return _libsumo.person_getLanePosition(personID)

def person_getTaxiReservations(stateFilter=0):
    return _libsumo.person_getTaxiReservations(stateFilter)

def person_splitTaxiReservation(reservationID, personIDs):
    return _libsumo.person_splitTaxiReservation(reservationID, personIDs)

def person_getIDList():
    return _libsumo.person_getIDList()

def person_getIDCount():
    return _libsumo.person_getIDCount()

def person_getParameter(objectID, param):
    return _libsumo.person_getParameter(objectID, param)

def person_getParameterWithKey(objectID, key):
    return _libsumo.person_getParameterWithKey(objectID, key)

def person_setParameter(objectID, param, value):
    return _libsumo.person_setParameter(objectID, param, value)

def person_getLength(typeID):
    return _libsumo.person_getLength(typeID)

def person_getMaxSpeed(typeID):
    return _libsumo.person_getMaxSpeed(typeID)

def person_getActionStepLength(typeID):
    return _libsumo.person_getActionStepLength(typeID)

def person_getSpeedFactor(typeID):
    return _libsumo.person_getSpeedFactor(typeID)

def person_getSpeedDeviation(typeID):
    return _libsumo.person_getSpeedDeviation(typeID)

def person_getAccel(typeID):
    return _libsumo.person_getAccel(typeID)

def person_getDecel(typeID):
    return _libsumo.person_getDecel(typeID)

def person_getEmergencyDecel(typeID):
    return _libsumo.person_getEmergencyDecel(typeID)

def person_getApparentDecel(typeID):
    return _libsumo.person_getApparentDecel(typeID)

def person_getImperfection(typeID):
    return _libsumo.person_getImperfection(typeID)

def person_getTau(typeID):
    return _libsumo.person_getTau(typeID)

def person_getVehicleClass(typeID):
    return _libsumo.person_getVehicleClass(typeID)

def person_getEmissionClass(typeID):
    return _libsumo.person_getEmissionClass(typeID)

def person_getShapeClass(typeID):
    return _libsumo.person_getShapeClass(typeID)

def person_getMinGap(typeID):
    return _libsumo.person_getMinGap(typeID)

def person_getWidth(typeID):
    return _libsumo.person_getWidth(typeID)

def person_getHeight(typeID):
    return _libsumo.person_getHeight(typeID)

def person_getColor(typeID):
    return _libsumo.person_getColor(typeID)

def person_getMinGapLat(typeID):
    return _libsumo.person_getMinGapLat(typeID)

def person_getMaxSpeedLat(typeID):
    return _libsumo.person_getMaxSpeedLat(typeID)

def person_getLateralAlignment(typeID):
    return _libsumo.person_getLateralAlignment(typeID)

def person_getPersonCapacity(typeID):
    return _libsumo.person_getPersonCapacity(typeID)

def person_add(*args, **kwargs):
    return _libsumo.person_add(*args, **kwargs)

def person_appendStage(personID, stage):
    return _libsumo.person_appendStage(personID, stage)

def person_replaceStage(personID, stageIndex, stage):
    return _libsumo.person_replaceStage(personID, stageIndex, stage)

def person_appendWaitingStage(*args, **kwargs):
    return _libsumo.person_appendWaitingStage(*args, **kwargs)

def person_appendWalkingStage(*args, **kwargs):
    return _libsumo.person_appendWalkingStage(*args, **kwargs)

def person_appendDrivingStage(*args, **kwargs):
    return _libsumo.person_appendDrivingStage(*args, **kwargs)

def person_removeStage(personID, nextStageIndex):
    return _libsumo.person_removeStage(personID, nextStageIndex)

def person_rerouteTraveltime(personID):
    return _libsumo.person_rerouteTraveltime(personID)

def person_moveTo(personID, edgeID, position):
    return _libsumo.person_moveTo(personID, edgeID, position)

def person_moveToXY(*args, **kwargs):
    return _libsumo.person_moveToXY(*args, **kwargs)

def person_setSpeed(personID, speed):
    return _libsumo.person_setSpeed(personID, speed)

def person_setType(personID, typeID):
    return _libsumo.person_setType(personID, typeID)

def person_setLength(typeID, length):
    return _libsumo.person_setLength(typeID, length)

def person_setMaxSpeed(typeID, speed):
    return _libsumo.person_setMaxSpeed(typeID, speed)

def person_setVehicleClass(typeID, clazz):
    return _libsumo.person_setVehicleClass(typeID, clazz)

def person_setSpeedFactor(typeID, factor):
    return _libsumo.person_setSpeedFactor(typeID, factor)

def person_setEmissionClass(typeID, clazz):
    return _libsumo.person_setEmissionClass(typeID, clazz)

def person_setShapeClass(typeID, shapeClass):
    return _libsumo.person_setShapeClass(typeID, shapeClass)

def person_setWidth(typeID, width):
    return _libsumo.person_setWidth(typeID, width)

def person_setHeight(typeID, height):
    return _libsumo.person_setHeight(typeID, height)

def person_setMinGap(typeID, minGap):
    return _libsumo.person_setMinGap(typeID, minGap)

def person_setAccel(typeID, accel):
    return _libsumo.person_setAccel(typeID, accel)

def person_setDecel(typeID, decel):
    return _libsumo.person_setDecel(typeID, decel)

def person_setEmergencyDecel(typeID, decel):
    return _libsumo.person_setEmergencyDecel(typeID, decel)

def person_setApparentDecel(typeID, decel):
    return _libsumo.person_setApparentDecel(typeID, decel)

def person_setImperfection(typeID, imperfection):
    return _libsumo.person_setImperfection(typeID, imperfection)

def person_setTau(typeID, tau):
    return _libsumo.person_setTau(typeID, tau)

def person_setColor(typeID, color):
    return _libsumo.person_setColor(typeID, color)

def person_setMinGapLat(typeID, minGapLat):
    return _libsumo.person_setMinGapLat(typeID, minGapLat)

def person_setMaxSpeedLat(typeID, speed):
    return _libsumo.person_setMaxSpeedLat(typeID, speed)

def person_setLateralAlignment(typeID, latAlignment):
    return _libsumo.person_setLateralAlignment(typeID, latAlignment)

def person_setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
    return _libsumo.person_setActionStepLength(typeID, actionStepLength, resetActionOffset)

def person_subscribe(*args, **kwargs):
    return _libsumo.person_subscribe(*args, **kwargs)

def person_unsubscribe(objectID):
    return _libsumo.person_unsubscribe(objectID)

def person_subscribeContext(*args, **kwargs):
    return _libsumo.person_subscribeContext(*args, **kwargs)

def person_unsubscribeContext(objectID, domain, dist):
    return _libsumo.person_unsubscribeContext(objectID, domain, dist)

def person_getAllSubscriptionResults():
    return _libsumo.person_getAllSubscriptionResults()

def person_getSubscriptionResults(objectID):
    return _libsumo.person_getSubscriptionResults(objectID)

def person_getAllContextSubscriptionResults():
    return _libsumo.person_getAllContextSubscriptionResults()

def person_getContextSubscriptionResults(objectID):
    return _libsumo.person_getContextSubscriptionResults(objectID)

def person_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.person_subscribeParameterWithKey(*args, **kwargs)

def person_storeShape(id, shape):
    return _libsumo.person_storeShape(id, shape)

def person_makeWrapper():
    return _libsumo.person_makeWrapper()

def person_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.person_handleVariable(objID, variable, wrapper, paramData)

class calibrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEdgeID(calibratorID):
        return _libsumo.calibrator_getEdgeID(calibratorID)

    @staticmethod
    def getLaneID(calibratorID):
        return _libsumo.calibrator_getLaneID(calibratorID)

    @staticmethod
    def getVehsPerHour(calibratorID):
        return _libsumo.calibrator_getVehsPerHour(calibratorID)

    @staticmethod
    def getSpeed(calibratorID):
        return _libsumo.calibrator_getSpeed(calibratorID)

    @staticmethod
    def getTypeID(calibratorID):
        return _libsumo.calibrator_getTypeID(calibratorID)

    @staticmethod
    def getBegin(calibratorID):
        return _libsumo.calibrator_getBegin(calibratorID)

    @staticmethod
    def getEnd(calibratorID):
        return _libsumo.calibrator_getEnd(calibratorID)

    @staticmethod
    def getRouteID(calibratorID):
        return _libsumo.calibrator_getRouteID(calibratorID)

    @staticmethod
    def getRouteProbeID(calibratorID):
        return _libsumo.calibrator_getRouteProbeID(calibratorID)

    @staticmethod
    def getVTypes(routeID):
        return _libsumo.calibrator_getVTypes(routeID)

    @staticmethod
    def getPassed(calibratorID):
        return _libsumo.calibrator_getPassed(calibratorID)

    @staticmethod
    def getInserted(calibratorID):
        return _libsumo.calibrator_getInserted(calibratorID)

    @staticmethod
    def getRemoved(calibratorID):
        return _libsumo.calibrator_getRemoved(calibratorID)

    @staticmethod
    def getIDList():
        return _libsumo.calibrator_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.calibrator_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.calibrator_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.calibrator_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.calibrator_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.calibrator_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.calibrator_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.calibrator_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.calibrator_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.calibrator_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.calibrator_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.calibrator_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.calibrator_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.calibrator_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def setFlow(*args, **kwargs):
        return _libsumo.calibrator_setFlow(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.calibrator_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.calibrator_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_calibrator

# Register calibrator in _libsumo:
_libsumo.calibrator_swigregister(calibrator)

def calibrator_getEdgeID(calibratorID):
    return _libsumo.calibrator_getEdgeID(calibratorID)

def calibrator_getLaneID(calibratorID):
    return _libsumo.calibrator_getLaneID(calibratorID)

def calibrator_getVehsPerHour(calibratorID):
    return _libsumo.calibrator_getVehsPerHour(calibratorID)

def calibrator_getSpeed(calibratorID):
    return _libsumo.calibrator_getSpeed(calibratorID)

def calibrator_getTypeID(calibratorID):
    return _libsumo.calibrator_getTypeID(calibratorID)

def calibrator_getBegin(calibratorID):
    return _libsumo.calibrator_getBegin(calibratorID)

def calibrator_getEnd(calibratorID):
    return _libsumo.calibrator_getEnd(calibratorID)

def calibrator_getRouteID(calibratorID):
    return _libsumo.calibrator_getRouteID(calibratorID)

def calibrator_getRouteProbeID(calibratorID):
    return _libsumo.calibrator_getRouteProbeID(calibratorID)

def calibrator_getVTypes(routeID):
    return _libsumo.calibrator_getVTypes(routeID)

def calibrator_getPassed(calibratorID):
    return _libsumo.calibrator_getPassed(calibratorID)

def calibrator_getInserted(calibratorID):
    return _libsumo.calibrator_getInserted(calibratorID)

def calibrator_getRemoved(calibratorID):
    return _libsumo.calibrator_getRemoved(calibratorID)

def calibrator_getIDList():
    return _libsumo.calibrator_getIDList()

def calibrator_getIDCount():
    return _libsumo.calibrator_getIDCount()

def calibrator_getParameter(objectID, param):
    return _libsumo.calibrator_getParameter(objectID, param)

def calibrator_getParameterWithKey(objectID, key):
    return _libsumo.calibrator_getParameterWithKey(objectID, key)

def calibrator_setParameter(objectID, param, value):
    return _libsumo.calibrator_setParameter(objectID, param, value)

def calibrator_subscribe(*args, **kwargs):
    return _libsumo.calibrator_subscribe(*args, **kwargs)

def calibrator_unsubscribe(objectID):
    return _libsumo.calibrator_unsubscribe(objectID)

def calibrator_subscribeContext(*args, **kwargs):
    return _libsumo.calibrator_subscribeContext(*args, **kwargs)

def calibrator_unsubscribeContext(objectID, domain, dist):
    return _libsumo.calibrator_unsubscribeContext(objectID, domain, dist)

def calibrator_getAllSubscriptionResults():
    return _libsumo.calibrator_getAllSubscriptionResults()

def calibrator_getSubscriptionResults(objectID):
    return _libsumo.calibrator_getSubscriptionResults(objectID)

def calibrator_getAllContextSubscriptionResults():
    return _libsumo.calibrator_getAllContextSubscriptionResults()

def calibrator_getContextSubscriptionResults(objectID):
    return _libsumo.calibrator_getContextSubscriptionResults(objectID)

def calibrator_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.calibrator_subscribeParameterWithKey(*args, **kwargs)

def calibrator_setFlow(*args, **kwargs):
    return _libsumo.calibrator_setFlow(*args, **kwargs)

def calibrator_makeWrapper():
    return _libsumo.calibrator_makeWrapper()

def calibrator_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.calibrator_handleVariable(objID, variable, wrapper, paramData)

class busstop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.busstop_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.busstop_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.busstop_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.busstop_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.busstop_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.busstop_getVehicleIDs(stopID)

    @staticmethod
    def getPersonCount(stopID):
        return _libsumo.busstop_getPersonCount(stopID)

    @staticmethod
    def getPersonIDs(stopID):
        return _libsumo.busstop_getPersonIDs(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.busstop_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.busstop_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.busstop_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.busstop_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.busstop_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.busstop_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.busstop_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.busstop_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.busstop_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.busstop_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.busstop_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.busstop_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.busstop_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.busstop_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.busstop_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.busstop_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_busstop

# Register busstop in _libsumo:
_libsumo.busstop_swigregister(busstop)

def busstop_getLaneID(stopID):
    return _libsumo.busstop_getLaneID(stopID)

def busstop_getStartPos(stopID):
    return _libsumo.busstop_getStartPos(stopID)

def busstop_getEndPos(stopID):
    return _libsumo.busstop_getEndPos(stopID)

def busstop_getName(stopID):
    return _libsumo.busstop_getName(stopID)

def busstop_getVehicleCount(stopID):
    return _libsumo.busstop_getVehicleCount(stopID)

def busstop_getVehicleIDs(stopID):
    return _libsumo.busstop_getVehicleIDs(stopID)

def busstop_getPersonCount(stopID):
    return _libsumo.busstop_getPersonCount(stopID)

def busstop_getPersonIDs(stopID):
    return _libsumo.busstop_getPersonIDs(stopID)

def busstop_getIDList():
    return _libsumo.busstop_getIDList()

def busstop_getIDCount():
    return _libsumo.busstop_getIDCount()

def busstop_getParameter(objectID, param):
    return _libsumo.busstop_getParameter(objectID, param)

def busstop_getParameterWithKey(objectID, key):
    return _libsumo.busstop_getParameterWithKey(objectID, key)

def busstop_setParameter(objectID, param, value):
    return _libsumo.busstop_setParameter(objectID, param, value)

def busstop_subscribe(*args, **kwargs):
    return _libsumo.busstop_subscribe(*args, **kwargs)

def busstop_unsubscribe(objectID):
    return _libsumo.busstop_unsubscribe(objectID)

def busstop_subscribeContext(*args, **kwargs):
    return _libsumo.busstop_subscribeContext(*args, **kwargs)

def busstop_unsubscribeContext(objectID, domain, dist):
    return _libsumo.busstop_unsubscribeContext(objectID, domain, dist)

def busstop_getAllSubscriptionResults():
    return _libsumo.busstop_getAllSubscriptionResults()

def busstop_getSubscriptionResults(objectID):
    return _libsumo.busstop_getSubscriptionResults(objectID)

def busstop_getAllContextSubscriptionResults():
    return _libsumo.busstop_getAllContextSubscriptionResults()

def busstop_getContextSubscriptionResults(objectID):
    return _libsumo.busstop_getContextSubscriptionResults(objectID)

def busstop_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.busstop_subscribeParameterWithKey(*args, **kwargs)

def busstop_makeWrapper():
    return _libsumo.busstop_makeWrapper()

def busstop_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.busstop_handleVariable(objID, variable, wrapper, paramData)

class parkingarea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.parkingarea_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.parkingarea_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.parkingarea_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.parkingarea_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.parkingarea_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.parkingarea_getVehicleIDs(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.parkingarea_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.parkingarea_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.parkingarea_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.parkingarea_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.parkingarea_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.parkingarea_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.parkingarea_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.parkingarea_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.parkingarea_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.parkingarea_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.parkingarea_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.parkingarea_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.parkingarea_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.parkingarea_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.parkingarea_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.parkingarea_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_parkingarea

# Register parkingarea in _libsumo:
_libsumo.parkingarea_swigregister(parkingarea)

def parkingarea_getLaneID(stopID):
    return _libsumo.parkingarea_getLaneID(stopID)

def parkingarea_getStartPos(stopID):
    return _libsumo.parkingarea_getStartPos(stopID)

def parkingarea_getEndPos(stopID):
    return _libsumo.parkingarea_getEndPos(stopID)

def parkingarea_getName(stopID):
    return _libsumo.parkingarea_getName(stopID)

def parkingarea_getVehicleCount(stopID):
    return _libsumo.parkingarea_getVehicleCount(stopID)

def parkingarea_getVehicleIDs(stopID):
    return _libsumo.parkingarea_getVehicleIDs(stopID)

def parkingarea_getIDList():
    return _libsumo.parkingarea_getIDList()

def parkingarea_getIDCount():
    return _libsumo.parkingarea_getIDCount()

def parkingarea_getParameter(objectID, param):
    return _libsumo.parkingarea_getParameter(objectID, param)

def parkingarea_getParameterWithKey(objectID, key):
    return _libsumo.parkingarea_getParameterWithKey(objectID, key)

def parkingarea_setParameter(objectID, param, value):
    return _libsumo.parkingarea_setParameter(objectID, param, value)

def parkingarea_subscribe(*args, **kwargs):
    return _libsumo.parkingarea_subscribe(*args, **kwargs)

def parkingarea_unsubscribe(objectID):
    return _libsumo.parkingarea_unsubscribe(objectID)

def parkingarea_subscribeContext(*args, **kwargs):
    return _libsumo.parkingarea_subscribeContext(*args, **kwargs)

def parkingarea_unsubscribeContext(objectID, domain, dist):
    return _libsumo.parkingarea_unsubscribeContext(objectID, domain, dist)

def parkingarea_getAllSubscriptionResults():
    return _libsumo.parkingarea_getAllSubscriptionResults()

def parkingarea_getSubscriptionResults(objectID):
    return _libsumo.parkingarea_getSubscriptionResults(objectID)

def parkingarea_getAllContextSubscriptionResults():
    return _libsumo.parkingarea_getAllContextSubscriptionResults()

def parkingarea_getContextSubscriptionResults(objectID):
    return _libsumo.parkingarea_getContextSubscriptionResults(objectID)

def parkingarea_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.parkingarea_subscribeParameterWithKey(*args, **kwargs)

def parkingarea_makeWrapper():
    return _libsumo.parkingarea_makeWrapper()

def parkingarea_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.parkingarea_handleVariable(objID, variable, wrapper, paramData)

class chargingstation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.chargingstation_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.chargingstation_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.chargingstation_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.chargingstation_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.chargingstation_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.chargingstation_getVehicleIDs(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.chargingstation_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.chargingstation_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.chargingstation_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.chargingstation_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.chargingstation_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.chargingstation_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.chargingstation_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.chargingstation_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.chargingstation_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.chargingstation_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.chargingstation_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.chargingstation_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.chargingstation_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.chargingstation_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.chargingstation_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.chargingstation_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_chargingstation

# Register chargingstation in _libsumo:
_libsumo.chargingstation_swigregister(chargingstation)

def chargingstation_getLaneID(stopID):
    return _libsumo.chargingstation_getLaneID(stopID)

def chargingstation_getStartPos(stopID):
    return _libsumo.chargingstation_getStartPos(stopID)

def chargingstation_getEndPos(stopID):
    return _libsumo.chargingstation_getEndPos(stopID)

def chargingstation_getName(stopID):
    return _libsumo.chargingstation_getName(stopID)

def chargingstation_getVehicleCount(stopID):
    return _libsumo.chargingstation_getVehicleCount(stopID)

def chargingstation_getVehicleIDs(stopID):
    return _libsumo.chargingstation_getVehicleIDs(stopID)

def chargingstation_getIDList():
    return _libsumo.chargingstation_getIDList()

def chargingstation_getIDCount():
    return _libsumo.chargingstation_getIDCount()

def chargingstation_getParameter(objectID, param):
    return _libsumo.chargingstation_getParameter(objectID, param)

def chargingstation_getParameterWithKey(objectID, key):
    return _libsumo.chargingstation_getParameterWithKey(objectID, key)

def chargingstation_setParameter(objectID, param, value):
    return _libsumo.chargingstation_setParameter(objectID, param, value)

def chargingstation_subscribe(*args, **kwargs):
    return _libsumo.chargingstation_subscribe(*args, **kwargs)

def chargingstation_unsubscribe(objectID):
    return _libsumo.chargingstation_unsubscribe(objectID)

def chargingstation_subscribeContext(*args, **kwargs):
    return _libsumo.chargingstation_subscribeContext(*args, **kwargs)

def chargingstation_unsubscribeContext(objectID, domain, dist):
    return _libsumo.chargingstation_unsubscribeContext(objectID, domain, dist)

def chargingstation_getAllSubscriptionResults():
    return _libsumo.chargingstation_getAllSubscriptionResults()

def chargingstation_getSubscriptionResults(objectID):
    return _libsumo.chargingstation_getSubscriptionResults(objectID)

def chargingstation_getAllContextSubscriptionResults():
    return _libsumo.chargingstation_getAllContextSubscriptionResults()

def chargingstation_getContextSubscriptionResults(objectID):
    return _libsumo.chargingstation_getContextSubscriptionResults(objectID)

def chargingstation_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.chargingstation_subscribeParameterWithKey(*args, **kwargs)

def chargingstation_makeWrapper():
    return _libsumo.chargingstation_makeWrapper()

def chargingstation_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.chargingstation_handleVariable(objID, variable, wrapper, paramData)

class overheadwire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.overheadwire_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.overheadwire_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.overheadwire_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.overheadwire_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.overheadwire_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.overheadwire_getVehicleIDs(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.overheadwire_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.overheadwire_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.overheadwire_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.overheadwire_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.overheadwire_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.overheadwire_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.overheadwire_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.overheadwire_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.overheadwire_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.overheadwire_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.overheadwire_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.overheadwire_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.overheadwire_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.overheadwire_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.overheadwire_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.overheadwire_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_overheadwire

# Register overheadwire in _libsumo:
_libsumo.overheadwire_swigregister(overheadwire)

def overheadwire_getLaneID(stopID):
    return _libsumo.overheadwire_getLaneID(stopID)

def overheadwire_getStartPos(stopID):
    return _libsumo.overheadwire_getStartPos(stopID)

def overheadwire_getEndPos(stopID):
    return _libsumo.overheadwire_getEndPos(stopID)

def overheadwire_getName(stopID):
    return _libsumo.overheadwire_getName(stopID)

def overheadwire_getVehicleCount(stopID):
    return _libsumo.overheadwire_getVehicleCount(stopID)

def overheadwire_getVehicleIDs(stopID):
    return _libsumo.overheadwire_getVehicleIDs(stopID)

def overheadwire_getIDList():
    return _libsumo.overheadwire_getIDList()

def overheadwire_getIDCount():
    return _libsumo.overheadwire_getIDCount()

def overheadwire_getParameter(objectID, param):
    return _libsumo.overheadwire_getParameter(objectID, param)

def overheadwire_getParameterWithKey(objectID, key):
    return _libsumo.overheadwire_getParameterWithKey(objectID, key)

def overheadwire_setParameter(objectID, param, value):
    return _libsumo.overheadwire_setParameter(objectID, param, value)

def overheadwire_subscribe(*args, **kwargs):
    return _libsumo.overheadwire_subscribe(*args, **kwargs)

def overheadwire_unsubscribe(objectID):
    return _libsumo.overheadwire_unsubscribe(objectID)

def overheadwire_subscribeContext(*args, **kwargs):
    return _libsumo.overheadwire_subscribeContext(*args, **kwargs)

def overheadwire_unsubscribeContext(objectID, domain, dist):
    return _libsumo.overheadwire_unsubscribeContext(objectID, domain, dist)

def overheadwire_getAllSubscriptionResults():
    return _libsumo.overheadwire_getAllSubscriptionResults()

def overheadwire_getSubscriptionResults(objectID):
    return _libsumo.overheadwire_getSubscriptionResults(objectID)

def overheadwire_getAllContextSubscriptionResults():
    return _libsumo.overheadwire_getAllContextSubscriptionResults()

def overheadwire_getContextSubscriptionResults(objectID):
    return _libsumo.overheadwire_getContextSubscriptionResults(objectID)

def overheadwire_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.overheadwire_subscribeParameterWithKey(*args, **kwargs)

def overheadwire_makeWrapper():
    return _libsumo.overheadwire_makeWrapper()

def overheadwire_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.overheadwire_handleVariable(objID, variable, wrapper, paramData)

class rerouter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getIDList():
        return _libsumo.rerouter_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.rerouter_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.rerouter_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.rerouter_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.rerouter_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.rerouter_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.rerouter_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.rerouter_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.rerouter_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.rerouter_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.rerouter_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.rerouter_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.rerouter_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.rerouter_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.rerouter_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.rerouter_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_rerouter

# Register rerouter in _libsumo:
_libsumo.rerouter_swigregister(rerouter)

def rerouter_getIDList():
    return _libsumo.rerouter_getIDList()

def rerouter_getIDCount():
    return _libsumo.rerouter_getIDCount()

def rerouter_getParameter(objectID, param):
    return _libsumo.rerouter_getParameter(objectID, param)

def rerouter_getParameterWithKey(objectID, key):
    return _libsumo.rerouter_getParameterWithKey(objectID, key)

def rerouter_setParameter(objectID, param, value):
    return _libsumo.rerouter_setParameter(objectID, param, value)

def rerouter_subscribe(*args, **kwargs):
    return _libsumo.rerouter_subscribe(*args, **kwargs)

def rerouter_unsubscribe(objectID):
    return _libsumo.rerouter_unsubscribe(objectID)

def rerouter_subscribeContext(*args, **kwargs):
    return _libsumo.rerouter_subscribeContext(*args, **kwargs)

def rerouter_unsubscribeContext(objectID, domain, dist):
    return _libsumo.rerouter_unsubscribeContext(objectID, domain, dist)

def rerouter_getAllSubscriptionResults():
    return _libsumo.rerouter_getAllSubscriptionResults()

def rerouter_getSubscriptionResults(objectID):
    return _libsumo.rerouter_getSubscriptionResults(objectID)

def rerouter_getAllContextSubscriptionResults():
    return _libsumo.rerouter_getAllContextSubscriptionResults()

def rerouter_getContextSubscriptionResults(objectID):
    return _libsumo.rerouter_getContextSubscriptionResults(objectID)

def rerouter_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.rerouter_subscribeParameterWithKey(*args, **kwargs)

def rerouter_makeWrapper():
    return _libsumo.rerouter_makeWrapper()

def rerouter_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.rerouter_handleVariable(objID, variable, wrapper, paramData)

class meandata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getIDList():
        return _libsumo.meandata_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.meandata_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.meandata_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.meandata_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.meandata_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.meandata_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.meandata_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.meandata_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.meandata_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.meandata_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.meandata_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.meandata_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.meandata_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.meandata_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.meandata_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.meandata_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_meandata

# Register meandata in _libsumo:
_libsumo.meandata_swigregister(meandata)

def meandata_getIDList():
    return _libsumo.meandata_getIDList()

def meandata_getIDCount():
    return _libsumo.meandata_getIDCount()

def meandata_getParameter(objectID, param):
    return _libsumo.meandata_getParameter(objectID, param)

def meandata_getParameterWithKey(objectID, key):
    return _libsumo.meandata_getParameterWithKey(objectID, key)

def meandata_setParameter(objectID, param, value):
    return _libsumo.meandata_setParameter(objectID, param, value)

def meandata_subscribe(*args, **kwargs):
    return _libsumo.meandata_subscribe(*args, **kwargs)

def meandata_unsubscribe(objectID):
    return _libsumo.meandata_unsubscribe(objectID)

def meandata_subscribeContext(*args, **kwargs):
    return _libsumo.meandata_subscribeContext(*args, **kwargs)

def meandata_unsubscribeContext(objectID, domain, dist):
    return _libsumo.meandata_unsubscribeContext(objectID, domain, dist)

def meandata_getAllSubscriptionResults():
    return _libsumo.meandata_getAllSubscriptionResults()

def meandata_getSubscriptionResults(objectID):
    return _libsumo.meandata_getSubscriptionResults(objectID)

def meandata_getAllContextSubscriptionResults():
    return _libsumo.meandata_getAllContextSubscriptionResults()

def meandata_getContextSubscriptionResults(objectID):
    return _libsumo.meandata_getContextSubscriptionResults(objectID)

def meandata_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.meandata_subscribeParameterWithKey(*args, **kwargs)

def meandata_makeWrapper():
    return _libsumo.meandata_makeWrapper()

def meandata_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.meandata_handleVariable(objID, variable, wrapper, paramData)

class variablespeedsign(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLanes(vssID):
        return _libsumo.variablespeedsign_getLanes(vssID)

    @staticmethod
    def getIDList():
        return _libsumo.variablespeedsign_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.variablespeedsign_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.variablespeedsign_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.variablespeedsign_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.variablespeedsign_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.variablespeedsign_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.variablespeedsign_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.variablespeedsign_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.variablespeedsign_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.variablespeedsign_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.variablespeedsign_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.variablespeedsign_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.variablespeedsign_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.variablespeedsign_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.variablespeedsign_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.variablespeedsign_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_variablespeedsign

# Register variablespeedsign in _libsumo:
_libsumo.variablespeedsign_swigregister(variablespeedsign)

def variablespeedsign_getLanes(vssID):
    return _libsumo.variablespeedsign_getLanes(vssID)

def variablespeedsign_getIDList():
    return _libsumo.variablespeedsign_getIDList()

def variablespeedsign_getIDCount():
    return _libsumo.variablespeedsign_getIDCount()

def variablespeedsign_getParameter(objectID, param):
    return _libsumo.variablespeedsign_getParameter(objectID, param)

def variablespeedsign_getParameterWithKey(objectID, key):
    return _libsumo.variablespeedsign_getParameterWithKey(objectID, key)

def variablespeedsign_setParameter(objectID, param, value):
    return _libsumo.variablespeedsign_setParameter(objectID, param, value)

def variablespeedsign_subscribe(*args, **kwargs):
    return _libsumo.variablespeedsign_subscribe(*args, **kwargs)

def variablespeedsign_unsubscribe(objectID):
    return _libsumo.variablespeedsign_unsubscribe(objectID)

def variablespeedsign_subscribeContext(*args, **kwargs):
    return _libsumo.variablespeedsign_subscribeContext(*args, **kwargs)

def variablespeedsign_unsubscribeContext(objectID, domain, dist):
    return _libsumo.variablespeedsign_unsubscribeContext(objectID, domain, dist)

def variablespeedsign_getAllSubscriptionResults():
    return _libsumo.variablespeedsign_getAllSubscriptionResults()

def variablespeedsign_getSubscriptionResults(objectID):
    return _libsumo.variablespeedsign_getSubscriptionResults(objectID)

def variablespeedsign_getAllContextSubscriptionResults():
    return _libsumo.variablespeedsign_getAllContextSubscriptionResults()

def variablespeedsign_getContextSubscriptionResults(objectID):
    return _libsumo.variablespeedsign_getContextSubscriptionResults(objectID)

def variablespeedsign_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.variablespeedsign_subscribeParameterWithKey(*args, **kwargs)

def variablespeedsign_makeWrapper():
    return _libsumo.variablespeedsign_makeWrapper()

def variablespeedsign_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.variablespeedsign_handleVariable(objID, variable, wrapper, paramData)

class routeprobe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEdgeID(probeID):
        return _libsumo.routeprobe_getEdgeID(probeID)

    @staticmethod
    def sampleLastRouteID(probeID):
        return _libsumo.routeprobe_sampleLastRouteID(probeID)

    @staticmethod
    def sampleCurrentRouteID(probeID):
        return _libsumo.routeprobe_sampleCurrentRouteID(probeID)

    @staticmethod
    def getIDList():
        return _libsumo.routeprobe_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.routeprobe_getIDCount()

    @staticmethod
    def getParameter(objectID, param):
        return _libsumo.routeprobe_getParameter(objectID, param)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.routeprobe_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, param, value):
        return _libsumo.routeprobe_setParameter(objectID, param, value)

    @staticmethod
    def subscribe(*args, **kwargs):
        return _libsumo.routeprobe_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.routeprobe_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):
        return _libsumo.routeprobe_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.routeprobe_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.routeprobe_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.routeprobe_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.routeprobe_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.routeprobe_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.routeprobe_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def makeWrapper():
        return _libsumo.routeprobe_makeWrapper()

    @staticmethod
    def handleVariable(objID, variable, wrapper, paramData):
        return _libsumo.routeprobe_handleVariable(objID, variable, wrapper, paramData)
    __swig_destroy__ = _libsumo.delete_routeprobe

# Register routeprobe in _libsumo:
_libsumo.routeprobe_swigregister(routeprobe)

def routeprobe_getEdgeID(probeID):
    return _libsumo.routeprobe_getEdgeID(probeID)

def routeprobe_sampleLastRouteID(probeID):
    return _libsumo.routeprobe_sampleLastRouteID(probeID)

def routeprobe_sampleCurrentRouteID(probeID):
    return _libsumo.routeprobe_sampleCurrentRouteID(probeID)

def routeprobe_getIDList():
    return _libsumo.routeprobe_getIDList()

def routeprobe_getIDCount():
    return _libsumo.routeprobe_getIDCount()

def routeprobe_getParameter(objectID, param):
    return _libsumo.routeprobe_getParameter(objectID, param)

def routeprobe_getParameterWithKey(objectID, key):
    return _libsumo.routeprobe_getParameterWithKey(objectID, key)

def routeprobe_setParameter(objectID, param, value):
    return _libsumo.routeprobe_setParameter(objectID, param, value)

def routeprobe_subscribe(*args, **kwargs):
    return _libsumo.routeprobe_subscribe(*args, **kwargs)

def routeprobe_unsubscribe(objectID):
    return _libsumo.routeprobe_unsubscribe(objectID)

def routeprobe_subscribeContext(*args, **kwargs):
    return _libsumo.routeprobe_subscribeContext(*args, **kwargs)

def routeprobe_unsubscribeContext(objectID, domain, dist):
    return _libsumo.routeprobe_unsubscribeContext(objectID, domain, dist)

def routeprobe_getAllSubscriptionResults():
    return _libsumo.routeprobe_getAllSubscriptionResults()

def routeprobe_getSubscriptionResults(objectID):
    return _libsumo.routeprobe_getSubscriptionResults(objectID)

def routeprobe_getAllContextSubscriptionResults():
    return _libsumo.routeprobe_getAllContextSubscriptionResults()

def routeprobe_getContextSubscriptionResults(objectID):
    return _libsumo.routeprobe_getContextSubscriptionResults(objectID)

def routeprobe_subscribeParameterWithKey(*args, **kwargs):
    return _libsumo.routeprobe_subscribeParameterWithKey(*args, **kwargs)

def routeprobe_makeWrapper():
    return _libsumo.routeprobe_makeWrapper()

def routeprobe_handleVariable(objID, variable, wrapper, paramData):
    return _libsumo.routeprobe_handleVariable(objID, variable, wrapper, paramData)



